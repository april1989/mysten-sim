{
  "commit": "03df554cc9fcd0ddf4128b32397e60a700955749",
  "races": [
    {
      "access1": {
        "col": 68,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 763,
        "snippet": " 760|\n 761|            self.objects_available_locked(&mut inner, epoch_store, output_object_keys, true);\n 762|\n>763|            let Some(acquired_locks) = inner.executing_certificates.remove(digest) else {\n 764|                trace!(\"{:?} not found in executing certificates, likely because it is a system transaction\", digest);\n 765|                return;\n 766|            };\n",
        "sourceLine": " 763|            let Some(acquired_locks) = inner.executing_certificates.remove(digest) else {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.notify_commit [sui-core/src/authority.rs:1120]",
          "transaction_manager::TransactionManager::notify_commit",
          "transaction_manager::TransactionManager::notify_commit.anon [sui-core/src/transaction_manager.rs:752]"
        ]
      },
      "access2": {
        "col": 72,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 844,
        "snippet": " 841|    // Returns the number of transactions pending or being executed right now.\n 842|    pub(crate) fn inflight_queue_len(&self) -> usize {\n 843|        let inner = self.inner.read();\n>844|        inner.pending_certificates.len() + inner.executing_certificates.len()\n 845|    }\n 846|\n 847|    // Reconfigures the TransactionManager for a new epoch. Existing transactions will be dropped\n",
        "sourceLine": " 844|        inner.pending_certificates.len() + inner.executing_certificates.len()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.Self::check_system_overload [sui-core/src/authority_server.rs:427]",
          "authority_server::ValidatorService::check_system_overload",
          "sol.Self::check_execution_overload [sui-core/src/authority_server.rs:292]",
          "authority_server::ValidatorService::check_execution_overload",
          "sol.inflight_queue_len [sui-core/src/authority_server.rs:248]",
          "transaction_manager::TransactionManager::inflight_queue_len"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 763,
        "name": "executing_certificates",
        "sourceLine": " 763|            let Some(acquired_locks) = inner.executing_certificates.remove(digest) else {\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 517,
        "snippet": " 514|\n 515|        if change_epoch_tx.contains_shared_object() {\n 516|            epoch_store\n>517|                .acquire_shared_locks_from_effects(\n 518|                    &change_epoch_tx,\n 519|                    &change_epoch_fx,\n 520|                    &self.authority_store,\n",
        "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]",
          "mod::CheckpointExecutor::execute_change_epoch_tx.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]"
        ]
      },
      "access2": {
        "col": 21,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 437,
        "snippet": " 434|                // skip already executed txes\n 435|                if self\n 436|                    .authority_store\n>437|                    .is_tx_already_executed(&digest)\n 438|                    .expect(\"Failed to check if tx is already executed\")\n 439|                {\n 440|                    // also ensure the transaction will not be retried after restart.\n",
        "sourceLine": " 437|                    .is_tx_already_executed(&digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 517,
        "name": "authority_store",
        "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 912,
        "snippet": " 909|        epoch_start_configuration: &EpochStartConfiguration,\n 910|    ) -> SuiResult {\n 911|        self.perpetual_tables\n>912|            .set_epoch_start_configuration(epoch_start_configuration)\n 913|            .await?;\n 914|        Ok(())\n 915|    }\n",
        "sourceLine": " 912|            .set_epoch_start_configuration(epoch_start_configuration)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.set_epoch_start_configuration [sui-core/src/authority.rs:2115]",
          "authority_store::AuthorityStore::set_epoch_start_configuration"
        ]
      },
      "access2": {
        "col": 30,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1819,
        "snippet": " 1816|        object_id: &ObjectID,\n 1817|        version: VersionNumber,\n 1818|    ) -> Result<Option<Object>, SuiError> {\n>1819|        self.perpetual_tables.get_object_by_key(object_id, version)\n 1820|    }\n 1821|}\n 1822|\n",
        "sourceLine": " 1819|        self.perpetual_tables.get_object_by_key(object_id, version)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4188]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4188]",
          "sol.get_object_by_key [sui-core/src/authority.rs:4189]",
          "authority_store::AuthorityStore::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 912,
        "name": "perpetual_tables",
        "sourceLine": " 912|            .set_epoch_start_configuration(epoch_start_configuration)\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 955,
        "snippet": " 952|        // for \"did the tx finish\".\n 953|        write_batch\n 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n>955|            .insert_batch(\n 956|                &self.perpetual_tables.executed_effects,\n 957|                [(transaction_digest, effects_digest)],\n 958|            )?;\n",
        "sourceLine": " 955|            .insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:457]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:457]",
          "sol.try_execute_immediately [sui-node/src/lib.rs:468]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.commit_certificate [sui-core/src/authority.rs:1106]",
          "authority::AuthorityState::commit_certificate",
          "sol.update_state [sui-core/src/authority.rs:3325]",
          "authority_store::AuthorityStore::update_state"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 383,
        "snippet": " 380|        Ok(self\n 381|            .perpetual_tables\n 382|            .executed_effects\n>383|            .contains_key(digest)?)\n 384|    }\n 385|\n 386|    /// Returns future containing the state hash for the given epoch\n",
        "sourceLine": " 383|            .contains_key(digest)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]",
          "sol.is_tx_already_executed [sui-core/src/transaction_manager.rs:437]",
          "authority_store::AuthorityStore::is_tx_already_executed"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 955,
        "name": "executed_effects",
        "sourceLine": " 955|            .insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 20,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1406,
        "snippet": " 1403|        assert!(effects.shared_objects().is_empty());\n 1404|\n 1405|        let mut write_batch = self.perpetual_tables.transactions.batch();\n>1406|        write_batch.delete_batch(\n 1407|            &self.perpetual_tables.executed_effects,\n 1408|            iter::once(tx_digest),\n 1409|        )?;\n",
        "sourceLine": " 1406|        write_batch.delete_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.revert_uncommitted_epoch_transactions [sui-core/src/authority.rs:2106]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions",
          "sol.model.loop.for [sui-core/src/authority.rs:3844]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions.anon [sui-core/src/authority.rs:3844]",
          "sol.revert_state_update [sui-core/src/authority.rs:3858]",
          "authority_store::AuthorityStore::revert_state_update"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 383,
        "snippet": " 380|        Ok(self\n 381|            .perpetual_tables\n 382|            .executed_effects\n>383|            .contains_key(digest)?)\n 384|    }\n 385|\n 386|    /// Returns future containing the state hash for the given epoch\n",
        "sourceLine": " 383|            .contains_key(digest)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]",
          "sol.is_tx_already_executed [sui-core/src/transaction_manager.rs:437]",
          "authority_store::AuthorityStore::is_tx_already_executed"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1406,
        "name": "executed_effects",
        "sourceLine": " 1406|        write_batch.delete_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 20,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1406,
        "snippet": " 1403|        assert!(effects.shared_objects().is_empty());\n 1404|\n 1405|        let mut write_batch = self.perpetual_tables.transactions.batch();\n>1406|        write_batch.delete_batch(\n 1407|            &self.perpetual_tables.executed_effects,\n 1408|            iter::once(tx_digest),\n 1409|        )?;\n",
        "sourceLine": " 1406|        write_batch.delete_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.revert_uncommitted_epoch_transactions [sui-core/src/authority.rs:2106]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions",
          "sol.model.loop.for [sui-core/src/authority.rs:3844]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions.anon [sui-core/src/authority.rs:3844]",
          "sol.revert_state_update [sui-core/src/authority.rs:3858]",
          "authority_store::AuthorityStore::revert_state_update"
        ]
      },
      "access2": {
        "col": 78,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 366,
        "snippet": " 363|        &self,\n 364|        digests: &[TransactionDigest],\n 365|    ) -> SuiResult<Vec<Option<TransactionEffects>>> {\n>366|        let executed_effects_digests = self.perpetual_tables.executed_effects.multi_get(digests)?;\n 367|        let effects = self.multi_get_effects(executed_effects_digests.iter().flatten())?;\n 368|        let mut tx_to_effects_map = effects\n 369|            .into_iter()\n",
        "sourceLine": " 366|        let executed_effects_digests = self.perpetual_tables.executed_effects.multi_get(digests)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.notify_read_executed_effects [sui-core/src/checkpoints/mod.rs:625]",
          "authority_notify_read::Arc::notify_read_executed_effects",
          "sol.multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:54]",
          "authority_notify_read::Arc::multi_get_executed_effects",
          "authority_store::AuthorityStore::multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:117]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1406,
        "name": "executed_effects",
        "sourceLine": " 1406|        write_batch.delete_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 955,
        "snippet": " 952|        // for \"did the tx finish\".\n 953|        write_batch\n 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n>955|            .insert_batch(\n 956|                &self.perpetual_tables.executed_effects,\n 957|                [(transaction_digest, effects_digest)],\n 958|            )?;\n",
        "sourceLine": " 955|            .insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.commit_certificate [sui-core/src/authority.rs:1106]",
          "authority::AuthorityState::commit_certificate",
          "sol.update_state [sui-core/src/authority.rs:3325]",
          "authority_store::AuthorityStore::update_state"
        ]
      },
      "access2": {
        "col": 78,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 366,
        "snippet": " 363|        &self,\n 364|        digests: &[TransactionDigest],\n 365|    ) -> SuiResult<Vec<Option<TransactionEffects>>> {\n>366|        let executed_effects_digests = self.perpetual_tables.executed_effects.multi_get(digests)?;\n 367|        let effects = self.multi_get_effects(executed_effects_digests.iter().flatten())?;\n 368|        let mut tx_to_effects_map = effects\n 369|            .into_iter()\n",
        "sourceLine": " 366|        let executed_effects_digests = self.perpetual_tables.executed_effects.multi_get(digests)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.notify_read_executed_effects [sui-core/src/checkpoints/mod.rs:625]",
          "authority_notify_read::Arc::notify_read_executed_effects",
          "sol.multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:54]",
          "authority_notify_read::Arc::multi_get_executed_effects",
          "authority_store::AuthorityStore::multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:117]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 955,
        "name": "executed_effects",
        "sourceLine": " 955|            .insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 42,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 487,
        "snippet": " 484|                }\n 485|            }\n 486|            // make sure we don't miss any cache entries while the lock is not held.\n>487|            inner.available_objects_cache.enable_unbounded_cache();\n 488|        }\n 489|\n 490|        let input_object_cache_misses = object_availability\n",
        "sourceLine": " 487|            inner.available_objects_cache.enable_unbounded_cache();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "transaction_manager::TransactionManager::new [sui-core/src/authority.rs:1975]",
          "sol.enqueue [sui-core/src/transaction_manager.rs:378]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:479]"
        ]
      },
      "access2": {
        "col": 71,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 482,
        "snippet": " 479|        {\n 480|            let mut inner = self.inner.write();\n 481|            for (key, value) in object_availability.iter_mut() {\n>482|                if let Some(available) = inner.available_objects_cache.is_object_available(key) {\n 483|                    *value = Some(available);\n 484|                }\n 485|            }\n",
        "sourceLine": " 482|                if let Some(available) = inner.available_objects_cache.is_object_available(key) {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:479]",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:481]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:481]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 487,
        "name": "available_objects_cache",
        "sourceLine": " 487|            inner.available_objects_cache.enable_unbounded_cache();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 344,
        "snippet": " 341|    fn maybe_reserve_capacity(&mut self) {\n 342|        self.lock_waiters.maybe_reserve_capacity();\n 343|        self.input_objects.maybe_reserve_capacity();\n>344|        self.pending_certificates.maybe_reserve_capacity();\n 345|        self.executing_certificates.maybe_reserve_capacity();\n 346|    }\n 347|\n",
        "sourceLine": " 344|        self.pending_certificates.maybe_reserve_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.maybe_reserve_capacity [sui-core/src/transaction_manager.rs:678]",
          "transaction_manager::Inner::maybe_reserve_capacity"
        ]
      },
      "access2": {
        "col": 42,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 569,
        "snippet": " 566|            }\n 567|\n 568|            // skip already pending txes\n>569|            if inner.pending_certificates.contains_key(&digest) {\n 570|                self.metrics\n 571|                    .transaction_manager_num_enqueued_certificates\n 572|                    .with_label_values(&[\"already_pending\"])\n",
        "sourceLine": " 569|            if inner.pending_certificates.contains_key(&digest) {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "transaction_manager::TransactionManager::new [sui-core/src/authority.rs:1975]",
          "sol.enqueue [sui-core/src/transaction_manager.rs:378]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:550]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:550]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 344,
        "name": "pending_certificates",
        "sourceLine": " 344|        self.pending_certificates.maybe_reserve_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 344,
        "snippet": " 341|    fn maybe_reserve_capacity(&mut self) {\n 342|        self.lock_waiters.maybe_reserve_capacity();\n 343|        self.input_objects.maybe_reserve_capacity();\n>344|        self.pending_certificates.maybe_reserve_capacity();\n 345|        self.executing_certificates.maybe_reserve_capacity();\n 346|    }\n 347|\n",
        "sourceLine": " 344|        self.pending_certificates.maybe_reserve_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.maybe_reserve_capacity [sui-core/src/transaction_manager.rs:678]",
          "transaction_manager::Inner::maybe_reserve_capacity"
        ]
      },
      "access2": {
        "col": 44,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 739,
        "snippet": " 736|            .set(inner.lock_waiters.len() as i64);\n 737|        self.metrics\n 738|            .transaction_manager_num_pending_certificates\n>739|            .set(inner.pending_certificates.len() as i64);\n 740|        self.metrics\n 741|            .transaction_manager_num_executing_certificates\n 742|            .set(inner.executing_certificates.len() as i64);\n",
        "sourceLine": " 739|            .set(inner.pending_certificates.len() as i64);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.objects_available_locked [sui-core/src/transaction_manager.rs:693]",
          "transaction_manager::TransactionManager::objects_available_locked"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 344,
        "name": "pending_certificates",
        "sourceLine": " 344|        self.pending_certificates.maybe_reserve_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 344,
        "snippet": " 341|    fn maybe_reserve_capacity(&mut self) {\n 342|        self.lock_waiters.maybe_reserve_capacity();\n 343|        self.input_objects.maybe_reserve_capacity();\n>344|        self.pending_certificates.maybe_reserve_capacity();\n 345|        self.executing_certificates.maybe_reserve_capacity();\n 346|    }\n 347|\n",
        "sourceLine": " 344|        self.pending_certificates.maybe_reserve_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.maybe_reserve_capacity [sui-core/src/transaction_manager.rs:678]",
          "transaction_manager::Inner::maybe_reserve_capacity"
        ]
      },
      "access2": {
        "col": 35,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 844,
        "snippet": " 841|    // Returns the number of transactions pending or being executed right now.\n 842|    pub(crate) fn inflight_queue_len(&self) -> usize {\n 843|        let inner = self.inner.read();\n>844|        inner.pending_certificates.len() + inner.executing_certificates.len()\n 845|    }\n 846|\n 847|    // Reconfigures the TransactionManager for a new epoch. Existing transactions will be dropped\n",
        "sourceLine": " 844|        inner.pending_certificates.len() + inner.executing_certificates.len()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.Self::check_system_overload [sui-core/src/authority_server.rs:427]",
          "authority_server::ValidatorService::check_system_overload",
          "sol.Self::check_execution_overload [sui-core/src/authority_server.rs:292]",
          "authority_server::ValidatorService::check_execution_overload",
          "sol.inflight_queue_len [sui-core/src/authority_server.rs:248]",
          "transaction_manager::TransactionManager::inflight_queue_len"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 344,
        "name": "pending_certificates",
        "sourceLine": " 344|        self.pending_certificates.maybe_reserve_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 352,
        "snippet": " 349|    fn maybe_shrink_capacity(&mut self) {\n 350|        self.lock_waiters.maybe_shrink_capacity();\n 351|        self.input_objects.maybe_shrink_capacity();\n>352|        self.pending_certificates.maybe_shrink_capacity();\n 353|        self.executing_certificates.maybe_shrink_capacity();\n 354|    }\n 355|}\n",
        "sourceLine": " 352|        self.pending_certificates.maybe_shrink_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.maybe_shrink_capacity [sui-core/src/transaction_manager.rs:694]",
          "transaction_manager::Inner::maybe_shrink_capacity"
        ]
      },
      "access2": {
        "col": 42,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 569,
        "snippet": " 566|            }\n 567|\n 568|            // skip already pending txes\n>569|            if inner.pending_certificates.contains_key(&digest) {\n 570|                self.metrics\n 571|                    .transaction_manager_num_enqueued_certificates\n 572|                    .with_label_values(&[\"already_pending\"])\n",
        "sourceLine": " 569|            if inner.pending_certificates.contains_key(&digest) {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx",
          "sol.enqueue_with_expected_effects_digest [sui-core/src/checkpoints/checkpoint_executor/mod.rs:527]",
          "transaction_manager::TransactionManager::enqueue_with_expected_effects_digest",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:418]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:550]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:550]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 352,
        "name": "pending_certificates",
        "sourceLine": " 352|        self.pending_certificates.maybe_shrink_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 352,
        "snippet": " 349|    fn maybe_shrink_capacity(&mut self) {\n 350|        self.lock_waiters.maybe_shrink_capacity();\n 351|        self.input_objects.maybe_shrink_capacity();\n>352|        self.pending_certificates.maybe_shrink_capacity();\n 353|        self.executing_certificates.maybe_shrink_capacity();\n 354|    }\n 355|}\n",
        "sourceLine": " 352|        self.pending_certificates.maybe_shrink_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.maybe_shrink_capacity [sui-core/src/transaction_manager.rs:694]",
          "transaction_manager::Inner::maybe_shrink_capacity"
        ]
      },
      "access2": {
        "col": 44,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 739,
        "snippet": " 736|            .set(inner.lock_waiters.len() as i64);\n 737|        self.metrics\n 738|            .transaction_manager_num_pending_certificates\n>739|            .set(inner.pending_certificates.len() as i64);\n 740|        self.metrics\n 741|            .transaction_manager_num_executing_certificates\n 742|            .set(inner.executing_certificates.len() as i64);\n",
        "sourceLine": " 739|            .set(inner.pending_certificates.len() as i64);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.execute_transaction_block [sui-core/src/quorum_driver/mod.rs:505]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_transaction_block",
          "transaction_orchestrator::TransactiondOrchestrator::execute_transaction_block.anon [sui-core/src/transaction_orchestrator.rs:225]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:244]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.objects_available_locked [sui-core/src/transaction_manager.rs:693]",
          "transaction_manager::TransactionManager::objects_available_locked"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 352,
        "name": "pending_certificates",
        "sourceLine": " 352|        self.pending_certificates.maybe_shrink_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 352,
        "snippet": " 349|    fn maybe_shrink_capacity(&mut self) {\n 350|        self.lock_waiters.maybe_shrink_capacity();\n 351|        self.input_objects.maybe_shrink_capacity();\n>352|        self.pending_certificates.maybe_shrink_capacity();\n 353|        self.executing_certificates.maybe_shrink_capacity();\n 354|    }\n 355|}\n",
        "sourceLine": " 352|        self.pending_certificates.maybe_shrink_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.maybe_shrink_capacity [sui-core/src/transaction_manager.rs:694]",
          "transaction_manager::Inner::maybe_shrink_capacity"
        ]
      },
      "access2": {
        "col": 35,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 844,
        "snippet": " 841|    // Returns the number of transactions pending or being executed right now.\n 842|    pub(crate) fn inflight_queue_len(&self) -> usize {\n 843|        let inner = self.inner.read();\n>844|        inner.pending_certificates.len() + inner.executing_certificates.len()\n 845|    }\n 846|\n 847|    // Reconfigures the TransactionManager for a new epoch. Existing transactions will be dropped\n",
        "sourceLine": " 844|        inner.pending_certificates.len() + inner.executing_certificates.len()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.Self::check_system_overload [sui-core/src/authority_server.rs:427]",
          "authority_server::ValidatorService::check_system_overload",
          "sol.Self::check_execution_overload [sui-core/src/authority_server.rs:292]",
          "authority_server::ValidatorService::check_execution_overload",
          "sol.inflight_queue_len [sui-core/src/authority_server.rs:248]",
          "transaction_manager::TransactionManager::inflight_queue_len"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 352,
        "name": "pending_certificates",
        "sourceLine": " 352|        self.pending_certificates.maybe_shrink_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 68,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 763,
        "snippet": " 760|\n 761|            self.objects_available_locked(&mut inner, epoch_store, output_object_keys, true);\n 762|\n>763|            let Some(acquired_locks) = inner.executing_certificates.remove(digest) else {\n 764|                trace!(\"{:?} not found in executing certificates, likely because it is a system transaction\", digest);\n 765|                return;\n 766|            };\n",
        "sourceLine": " 763|            let Some(acquired_locks) = inner.executing_certificates.remove(digest) else {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.notify_commit [sui-core/src/authority.rs:1120]",
          "transaction_manager::TransactionManager::notify_commit",
          "transaction_manager::TransactionManager::notify_commit.anon [sui-core/src/transaction_manager.rs:752]"
        ]
      },
      "access2": {
        "col": 46,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 742,
        "snippet": " 739|            .set(inner.pending_certificates.len() as i64);\n 740|        self.metrics\n 741|            .transaction_manager_num_executing_certificates\n>742|            .set(inner.executing_certificates.len() as i64);\n 743|    }\n 744|\n 745|    /// Notifies TransactionManager about a transaction that has been committed.\n",
        "sourceLine": " 742|            .set(inner.executing_certificates.len() as i64);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.objects_available_locked [sui-core/src/transaction_manager.rs:693]",
          "transaction_manager::TransactionManager::objects_available_locked"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 763,
        "name": "executing_certificates",
        "sourceLine": " 763|            let Some(acquired_locks) = inner.executing_certificates.remove(digest) else {\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 517,
        "snippet": " 514|\n 515|        if change_epoch_tx.contains_shared_object() {\n 516|            epoch_store\n>517|                .acquire_shared_locks_from_effects(\n 518|                    &change_epoch_tx,\n 519|                    &change_epoch_fx,\n 520|                    &self.authority_store,\n",
        "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]",
          "mod::CheckpointExecutor::execute_change_epoch_tx.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]"
        ]
      },
      "access2": {
        "col": 29,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/storage.rs",
        "line": 149,
        "snippet": " 146|        &self,\n 147|        digest: &TransactionEventsDigest,\n 148|    ) -> Result<Option<TransactionEvents>, Self::Error> {\n>149|        self.authority_store.get_events(digest)\n 150|    }\n 151|}\n 152|\n",
        "sourceLine": " 149|        self.authority_store.get_events(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:398]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:398]",
          "sol.get_transaction_events [sui-core/src/authority_server.rs:399]",
          "storage::RocksDbStore::get_transaction_events"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 517,
        "name": "authority_store",
        "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 26,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 342,
        "snippet": " 339|    }\n 340|\n 341|    fn maybe_reserve_capacity(&mut self) {\n>342|        self.lock_waiters.maybe_reserve_capacity();\n 343|        self.input_objects.maybe_reserve_capacity();\n 344|        self.pending_certificates.maybe_reserve_capacity();\n 345|        self.executing_certificates.maybe_reserve_capacity();\n",
        "sourceLine": " 342|        self.lock_waiters.maybe_reserve_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.maybe_reserve_capacity [sui-core/src/transaction_manager.rs:678]",
          "transaction_manager::Inner::maybe_reserve_capacity"
        ]
      },
      "access2": {
        "col": 56,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 603,
        "snippet": " 600|                if !object_availability[&key].unwrap() {\n 601|                    // 1. The input object is not yet available.\n 602|                    acquire = true;\n>603|                    let lock_queue = inner.lock_waiters.entry(key).or_default();\n 604|                    match lock_mode {\n 605|                        LockMode::Default => {\n 606|                            // If the transaction is acquiring the object in Default mode, it must\n",
        "sourceLine": " 603|                    let lock_queue = inner.lock_waiters.entry(key).or_default();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "transaction_manager::TransactionManager::new [sui-core/src/authority.rs:1975]",
          "sol.enqueue [sui-core/src/transaction_manager.rs:378]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:550]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:550]",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:597]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:597]",
          "sol.model.ifTrueElse [sui-core/src/transaction_manager.rs:600]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:600]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 342,
        "name": "lock_waiters",
        "sourceLine": " 342|        self.lock_waiters.maybe_reserve_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 26,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 350,
        "snippet": " 347|\n 348|    /// After reaching 1/4 load in hashmaps, decrease capacity to increase load to 1/2.\n 349|    fn maybe_shrink_capacity(&mut self) {\n>350|        self.lock_waiters.maybe_shrink_capacity();\n 351|        self.input_objects.maybe_shrink_capacity();\n 352|        self.pending_certificates.maybe_shrink_capacity();\n 353|        self.executing_certificates.maybe_shrink_capacity();\n",
        "sourceLine": " 350|        self.lock_waiters.maybe_shrink_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.maybe_shrink_capacity [sui-core/src/transaction_manager.rs:694]",
          "transaction_manager::Inner::maybe_shrink_capacity"
        ]
      },
      "access2": {
        "col": 56,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 603,
        "snippet": " 600|                if !object_availability[&key].unwrap() {\n 601|                    // 1. The input object is not yet available.\n 602|                    acquire = true;\n>603|                    let lock_queue = inner.lock_waiters.entry(key).or_default();\n 604|                    match lock_mode {\n 605|                        LockMode::Default => {\n 606|                            // If the transaction is acquiring the object in Default mode, it must\n",
        "sourceLine": " 603|                    let lock_queue = inner.lock_waiters.entry(key).or_default();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:471]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:471]",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:474]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:474]",
          "sol.enqueue_certificates_for_execution [sui-core/src/authority_server.rs:476]",
          "authority::AuthorityState::enqueue_certificates_for_execution",
          "sol.enqueue_certificates [sui-core/src/authority.rs:2044]",
          "transaction_manager::TransactionManager::enqueue_certificates",
          "sol.enqueue [sui-core/src/transaction_manager.rs:397]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:550]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:550]",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:597]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:597]",
          "sol.model.ifTrueElse [sui-core/src/transaction_manager.rs:600]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:600]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 350,
        "name": "lock_waiters",
        "sourceLine": " 350|        self.lock_waiters.maybe_shrink_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 27,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 343,
        "snippet": " 340|\n 341|    fn maybe_reserve_capacity(&mut self) {\n 342|        self.lock_waiters.maybe_reserve_capacity();\n>343|        self.input_objects.maybe_reserve_capacity();\n 344|        self.pending_certificates.maybe_reserve_capacity();\n 345|        self.executing_certificates.maybe_reserve_capacity();\n 346|    }\n",
        "sourceLine": " 343|        self.input_objects.maybe_reserve_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.maybe_reserve_capacity [sui-core/src/transaction_manager.rs:678]",
          "transaction_manager::Inner::maybe_reserve_capacity"
        ]
      },
      "access2": {
        "col": 58,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 638,
        "snippet": " 635|                }\n 636|                if acquire {\n 637|                    pending_cert.acquiring_locks.insert(key, lock_mode);\n>638|                    let input_count = inner.input_objects.entry(key.0).or_default();\n 639|                    *input_count += 1;\n 640|                } else {\n 641|                    pending_cert.acquired_locks.insert(key, lock_mode);\n",
        "sourceLine": " 638|                    let input_count = inner.input_objects.entry(key.0).or_default();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:471]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:471]",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:474]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:474]",
          "sol.enqueue_certificates_for_execution [sui-core/src/authority_server.rs:476]",
          "authority::AuthorityState::enqueue_certificates_for_execution",
          "sol.enqueue_certificates [sui-core/src/authority.rs:2044]",
          "transaction_manager::TransactionManager::enqueue_certificates",
          "sol.enqueue [sui-core/src/transaction_manager.rs:397]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:550]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:550]",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:597]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:597]",
          "sol.model.ifTrueElse [sui-core/src/transaction_manager.rs:636]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:636]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 343,
        "name": "input_objects",
        "sourceLine": " 343|        self.input_objects.maybe_reserve_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 27,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 351,
        "snippet": " 348|    /// After reaching 1/4 load in hashmaps, decrease capacity to increase load to 1/2.\n 349|    fn maybe_shrink_capacity(&mut self) {\n 350|        self.lock_waiters.maybe_shrink_capacity();\n>351|        self.input_objects.maybe_shrink_capacity();\n 352|        self.pending_certificates.maybe_shrink_capacity();\n 353|        self.executing_certificates.maybe_shrink_capacity();\n 354|    }\n",
        "sourceLine": " 351|        self.input_objects.maybe_shrink_capacity();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.maybe_shrink_capacity [sui-core/src/transaction_manager.rs:694]",
          "transaction_manager::Inner::maybe_shrink_capacity"
        ]
      },
      "access2": {
        "col": 58,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 638,
        "snippet": " 635|                }\n 636|                if acquire {\n 637|                    pending_cert.acquiring_locks.insert(key, lock_mode);\n>638|                    let input_count = inner.input_objects.entry(key.0).or_default();\n 639|                    *input_count += 1;\n 640|                } else {\n 641|                    pending_cert.acquired_locks.insert(key, lock_mode);\n",
        "sourceLine": " 638|                    let input_count = inner.input_objects.entry(key.0).or_default();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:471]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:471]",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:474]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:474]",
          "sol.enqueue_certificates_for_execution [sui-core/src/authority_server.rs:476]",
          "authority::AuthorityState::enqueue_certificates_for_execution",
          "sol.enqueue_certificates [sui-core/src/authority.rs:2044]",
          "transaction_manager::TransactionManager::enqueue_certificates",
          "sol.enqueue [sui-core/src/transaction_manager.rs:397]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:550]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:550]",
          "sol.model.loop.for [sui-core/src/transaction_manager.rs:597]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:597]",
          "sol.model.ifTrueElse [sui-core/src/transaction_manager.rs:636]",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:636]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 351,
        "name": "input_objects",
        "sourceLine": " 351|        self.input_objects.maybe_shrink_capacity();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority.rs",
        "line": 3886,
        "snippet": " 3883|            expensive_safety_check_config,\n 3884|            cur_epoch_store.get_chain_identifier(),\n 3885|        );\n>3886|        self.epoch_store.store(new_epoch_store.clone());\n 3887|        cur_epoch_store.epoch_terminated().await;\n 3888|        Ok(new_epoch_store)\n 3889|    }\n",
        "sourceLine": " 3886|        self.epoch_store.store(new_epoch_store.clone());\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.reopen_epoch_db [sui-core/src/authority.rs:2138]",
          "authority::AuthorityState::reopen_epoch_db"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_handler.rs",
        "line": 151,
        "snippet": " 148|\n 149|        let epoch_start = self\n 150|            .epoch_store\n>151|            .epoch_start_config()\n 152|            .epoch_start_timestamp_ms();\n 153|        let timestamp = if timestamp < epoch_start {\n 154|            error!(\n",
        "sourceLine": " 151|            .epoch_start_config()\n",
        "stacktrace": [
          "consensus_handler::ConsensusHandler::handle_consensus_output"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority.rs",
        "line": 3886,
        "name": "epoch_store",
        "sourceLine": " 3886|        self.epoch_store.store(new_epoch_store.clone());\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority.rs",
        "line": 3886,
        "snippet": " 3883|            expensive_safety_check_config,\n 3884|            cur_epoch_store.get_chain_identifier(),\n 3885|        );\n>3886|        self.epoch_store.store(new_epoch_store.clone());\n 3887|        cur_epoch_store.epoch_terminated().await;\n 3888|        Ok(new_epoch_store)\n 3889|    }\n",
        "sourceLine": " 3886|        self.epoch_store.store(new_epoch_store.clone());\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.reopen_epoch_db [sui-core/src/authority.rs:2138]",
          "authority::AuthorityState::reopen_epoch_db"
        ]
      },
      "access2": {
        "col": 44,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 589,
        "snippet": " 586|                }\n 587|                Ok(false) => (),\n 588|            };\n>589|            let mut last = self.epoch_store.last_built_checkpoint_commit_height();\n 590|            for (height, pending) in self.epoch_store.get_pending_checkpoints(last) {\n 591|                last = Some(height);\n 592|                debug!(\n",
        "sourceLine": " 589|            let mut last = self.epoch_store.last_built_checkpoint_commit_height();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority.rs",
        "line": 3886,
        "name": "epoch_store",
        "sourceLine": " 3886|        self.epoch_store.store(new_epoch_store.clone());\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority.rs",
        "line": 3886,
        "snippet": " 3883|            expensive_safety_check_config,\n 3884|            cur_epoch_store.get_chain_identifier(),\n 3885|        );\n>3886|        self.epoch_store.store(new_epoch_store.clone());\n 3887|        cur_epoch_store.epoch_terminated().await;\n 3888|        Ok(new_epoch_store)\n 3889|    }\n",
        "sourceLine": " 3886|        self.epoch_store.store(new_epoch_store.clone());\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.reopen_epoch_db [sui-core/src/authority.rs:2138]",
          "authority::AuthorityState::reopen_epoch_db"
        ]
      },
      "access2": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority.rs",
        "line": 2259,
        "snippet": " 2256|    /// the case. This also means we should minimize the number of call-sites. Only call it when\n 2257|    /// there is no way to obtain it from somewhere else.\n 2258|    pub fn load_epoch_store_one_call_per_task(&self) -> Guard<Arc<AuthorityPerEpochStore>> {\n>2259|        self.epoch_store.load()\n 2260|    }\n 2261|\n 2262|    // Load the epoch store, should be used in tests only.\n",
        "sourceLine": " 2259|        self.epoch_store.load()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.handle_transaction_info_request_from_some_validators [sui-core/src/quorum_driver/mod.rs:457]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1828]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1829]",
          "sol.handle_transaction_info_request [sui-core/src/authority_aggregator.rs:1831]",
          "authority::AuthorityState::handle_transaction_info_request",
          "sol.load_epoch_store_one_call_per_task [sui-core/src/authority.rs:1804]",
          "authority::AuthorityState::load_epoch_store_one_call_per_task"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority.rs",
        "line": 3886,
        "name": "epoch_store",
        "sourceLine": " 3886|        self.epoch_store.store(new_epoch_store.clone());\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-node/src/lib.rs",
        "line": 1141,
        "snippet": " 1138|            let authority_names_to_peer_ids =\n 1139|                new_epoch_start_state.get_authority_names_to_peer_ids();\n 1140|            self.connection_monitor_status\n>1141|                .update_mapping_for_epoch(authority_names_to_peer_ids);\n 1142|\n 1143|            let authority_names_to_hostnames =\n 1144|                new_epoch_start_state.get_authority_names_to_hostnames();\n",
        "sourceLine": " 1141|                .update_mapping_for_epoch(authority_names_to_peer_ids);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]"
        ]
      },
      "access2": {
        "col": 21,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 517,
        "snippet": " 514|                // filter out any nodes that appear disconnected\n 515|                let connected = self\n 516|                    .connection_monitor_status\n>517|                    .check_connection(&self.authority, authority)\n 518|                    .unwrap_or(ConnectionStatus::Disconnected)\n 519|                    == ConnectionStatus::Connected;\n 520|                if !connected && before_our_position {\n",
        "sourceLine": " 517|                    .check_connection(&self.authority, authority)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.write_checkpoints [sui-core/src/checkpoints/mod.rs:635]",
          "mod::CheckpointBuilder::write_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:646]",
          "mod::CheckpointBuilder::write_checkpoints.anon [sui-core/src/checkpoints/mod.rs:646]",
          "sol.checkpoint_created [sui-core/src/checkpoints/mod.rs:653]",
          "checkpoint_output::SubmitCheckpointToConsensus::checkpoint_created",
          "sol.submit_to_consensus [sui-core/src/checkpoints/checkpoint_output.rs:96]",
          "consensus_adapter::Arc::submit_to_consensus",
          "sol.submit [sui-core/src/consensus_adapter.rs:1037]",
          "consensus_adapter::ConsensusAdapter::submit",
          "sol.submit_unchecked [sui-core/src/consensus_adapter.rs:554]",
          "consensus_adapter::ConsensusAdapter::submit_unchecked",
          "sol.submit_and_wait [sui-core/src/consensus_adapter.rs:578]",
          "consensus_adapter::ConsensusAdapter::submit_and_wait",
          "sol.submit_and_wait_inner [sui-core/src/consensus_adapter.rs:602]",
          "consensus_adapter::ConsensusAdapter::submit_and_wait_inner",
          "sol.await_submit_delay [sui-core/src/consensus_adapter.rs:627]",
          "consensus_adapter::ConsensusAdapter::await_submit_delay",
          "consensus_adapter::ConsensusAdapter::await_submit_delay.anon [sui-core/src/consensus_adapter.rs:407]",
          "sol.await_submit_delay_user_transaction [sui-core/src/consensus_adapter.rs:410]",
          "consensus_adapter::ConsensusAdapter::await_submit_delay_user_transaction",
          "sol.submission_position [sui-core/src/consensus_adapter.rs:428]",
          "consensus_adapter::ConsensusAdapter::submission_position",
          "sol.check_submission_wrt_connectivity_and_scores [sui-core/src/consensus_adapter.rs:471]",
          "consensus_adapter::ConsensusAdapter::check_submission_wrt_connectivity_and_scores",
          "consensus_adapter::ConsensusAdapter::check_submission_wrt_connectivity_and_scores.anon [sui-core/src/consensus_adapter.rs:508]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-node/src/lib.rs",
        "line": 1141,
        "name": "connection_monitor_status",
        "sourceLine": " 1141|                .update_mapping_for_epoch(authority_names_to_peer_ids);\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 24,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 1014,
        "snippet": " 1011|            data.sum -= pop; // This does not overflow because of how running sum is calculated\n 1012|        }\n 1013|        let latency = data.sum.as_millis() as u64 / data.points.len() as u64;\n>1014|        self.latency_ms.store(latency, Ordering::Relaxed);\n 1015|    }\n 1016|\n 1017|    pub fn latency(&self) -> Option<Duration> {\n",
        "sourceLine": " 1014|        self.latency_ms.store(latency, Ordering::Relaxed);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "sol.report [sui-core/src/authority_aggregator.rs:1686]",
          "consensus_adapter::LatencyObserver::report"
        ]
      },
      "access2": {
        "col": 38,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 1018,
        "snippet": " 1015|    }\n 1016|\n 1017|    pub fn latency(&self) -> Option<Duration> {\n>1018|        let latency = self.latency_ms.load(Ordering::Relaxed);\n 1019|        if latency == u64::MAX {\n 1020|            // Not initialized yet (0 data points)\n 1021|            None\n",
        "sourceLine": " 1018|        let latency = self.latency_ms.load(Ordering::Relaxed);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.write_checkpoints [sui-core/src/checkpoints/mod.rs:635]",
          "mod::CheckpointBuilder::write_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:646]",
          "mod::CheckpointBuilder::write_checkpoints.anon [sui-core/src/checkpoints/mod.rs:646]",
          "sol.checkpoint_created [sui-core/src/checkpoints/mod.rs:653]",
          "checkpoint_output::SubmitCheckpointToConsensus::checkpoint_created",
          "sol.submit_to_consensus [sui-core/src/checkpoints/checkpoint_output.rs:96]",
          "consensus_adapter::Arc::submit_to_consensus",
          "sol.submit [sui-core/src/consensus_adapter.rs:1037]",
          "consensus_adapter::ConsensusAdapter::submit",
          "sol.submit_unchecked [sui-core/src/consensus_adapter.rs:554]",
          "consensus_adapter::ConsensusAdapter::submit_unchecked",
          "sol.submit_and_wait [sui-core/src/consensus_adapter.rs:578]",
          "consensus_adapter::ConsensusAdapter::submit_and_wait",
          "sol.submit_and_wait_inner [sui-core/src/consensus_adapter.rs:602]",
          "consensus_adapter::ConsensusAdapter::submit_and_wait_inner",
          "sol.await_submit_delay [sui-core/src/consensus_adapter.rs:627]",
          "consensus_adapter::ConsensusAdapter::await_submit_delay",
          "consensus_adapter::ConsensusAdapter::await_submit_delay.anon [sui-core/src/consensus_adapter.rs:407]",
          "sol.await_submit_delay_user_transaction [sui-core/src/consensus_adapter.rs:410]",
          "consensus_adapter::ConsensusAdapter::await_submit_delay_user_transaction",
          "sol.latency [sui-core/src/consensus_adapter.rs:432]",
          "consensus_adapter::LatencyObserver::latency"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 1014,
        "name": "latency_ms",
        "sourceLine": " 1014|        self.latency_ms.store(latency, Ordering::Relaxed);\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 178,
        "snippet": " 175|                    &transaction_digest,\n 176|                    &next_digest,\n 177|                )?;\n>178|                perpetual_batch.delete_range(\n 179|                    &perpetual_db.executed_transactions_to_checkpoint,\n 180|                    &transaction_digest,\n 181|                    &next_digest,\n",
        "sourceLine": " 178|                perpetual_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:166]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:166]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:167]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:167]"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 434,
        "snippet": " 431|        Ok(self\n 432|            .perpetual_tables\n 433|            .executed_transactions_to_checkpoint\n>434|            .contains_key(digest)?)\n 435|    }\n 436|\n 437|    // DEPRECATED -- use function of same name in AuthorityPerEpochStore\n",
        "sourceLine": " 434|            .contains_key(digest)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.revert_uncommitted_epoch_transactions [sui-core/src/authority.rs:2106]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions",
          "sol.model.loop.for [sui-core/src/authority.rs:3844]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions.anon [sui-core/src/authority.rs:3844]",
          "sol.deprecated_is_transaction_executed_in_checkpoint [sui-core/src/authority.rs:3852]",
          "authority_store::AuthorityStore::deprecated_is_transaction_executed_in_checkpoint"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 178,
        "name": "executed_transactions_to_checkpoint",
        "sourceLine": " 178|                perpetual_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 967,
        "snippet": " 964|    ) -> anyhow::Result<SuiSystemState> {\n 965|        let (system_state, effects) = self\n 966|            .state\n>967|            .create_and_execute_advance_epoch_tx(\n 968|                &self.epoch_store,\n 969|                epoch_total_gas_cost,\n 970|                checkpoint,\n",
        "sourceLine": " 967|            .create_and_execute_advance_epoch_tx(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.augment_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:837]",
          "mod::CheckpointBuilder::augment_epoch_last_checkpoint"
        ]
      },
      "access2": {
        "col": 29,
        "dir": "/git/sui/crates",
        "filename": "sui-node/src/lib.rs",
        "line": 1082,
        "snippet": " 1079|                            .supported_protocol_versions\n 1080|                            .expect(\"Supported versions should be populated\"),\n 1081|                        self.state\n>1082|                            .get_available_system_packages(\n 1083|                                max_binary_format_version,\n 1084|                                no_extraneous_module_bytes,\n 1085|                            )\n",
        "sourceLine": " 1082|                            .get_available_system_packages(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1068]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1068]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 967,
        "name": "state",
        "sourceLine": " 967|            .create_and_execute_advance_epoch_tx(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority_server.rs",
        "line": 598,
        "snippet": " 595|    ) -> Result<tonic::Response<TransactionInfoResponse>, tonic::Status> {\n 596|        let request = request.into_inner();\n 597|\n>598|        let response = self.state.handle_transaction_info_request(request).await?;\n 599|\n 600|        Ok(tonic::Response::new(response))\n 601|    }\n",
        "sourceLine": " 598|        let response = self.state.handle_transaction_info_request(request).await?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.handle_transaction_info_request_from_some_validators [sui-core/src/quorum_driver/mod.rs:457]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1828]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1829]",
          "sol.handle_transaction_info_request [sui-core/src/authority_aggregator.rs:1831]",
          "authority_client::NetworkAuthorityClient::handle_transaction_info_request",
          "sol.transaction_info [sui-core/src/authority_client.rs:174]",
          "authority_server::ValidatorService::transaction_info"
        ]
      },
      "access2": {
        "col": 29,
        "dir": "/git/sui/crates",
        "filename": "sui-node/src/lib.rs",
        "line": 1082,
        "snippet": " 1079|                            .supported_protocol_versions\n 1080|                            .expect(\"Supported versions should be populated\"),\n 1081|                        self.state\n>1082|                            .get_available_system_packages(\n 1083|                                max_binary_format_version,\n 1084|                                no_extraneous_module_bytes,\n 1085|                            )\n",
        "sourceLine": " 1082|                            .get_available_system_packages(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1068]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1068]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority_server.rs",
        "line": 598,
        "name": "state",
        "sourceLine": " 598|        let response = self.state.handle_transaction_info_request(request).await?;\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 306,
        "snippet": " 303|            .authority_store\n 304|            .perpetual_tables\n 305|            .root_state_hash_by_epoch\n>306|            .unbounded_iter()\n 307|            .skip_to_last()\n 308|            .next()\n 309|            .map(|(epoch, (highest, hash))| {\n",
        "sourceLine": " 306|            .unbounded_iter()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.digest_epoch [sui-core/src/checkpoints/mod.rs:858]",
          "state_accumulator::StateAccumulator::digest_epoch",
          "sol.accumulate_epoch [sui-core/src/state_accumulator.rs:397]",
          "state_accumulator::StateAccumulator::accumulate_epoch"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 295,
        "snippet": " 292|            .authority_store\n 293|            .perpetual_tables\n 294|            .root_state_hash_by_epoch\n>295|            .get(epoch)?\n 296|        {\n 297|            return Ok(acc);\n 298|        }\n",
        "sourceLine": " 295|            .get(epoch)?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.accumulate_epoch [sui-core/src/checkpoints/checkpoint_executor/mod.rs:614]",
          "state_accumulator::StateAccumulator::accumulate_epoch"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 306,
        "name": "root_state_hash_by_epoch",
        "sourceLine": " 306|            .unbounded_iter()\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 20,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 1007,
        "snippet": " 1004|    pub fn report(&self, latency: Duration) {\n 1005|        const MAX_SAMPLES: usize = 64;\n 1006|        let mut data = self.data.lock();\n>1007|        data.points.push_back(latency);\n 1008|        data.sum += latency;\n 1009|        if data.points.len() >= MAX_SAMPLES {\n 1010|            let pop = data.points.pop_front().expect(\"data vector is not empty\");\n",
        "sourceLine": " 1007|        data.points.push_back(latency);\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "sol.report [sui-core/src/authority_aggregator.rs:1686]",
          "consensus_adapter::LatencyObserver::report"
        ]
      },
      "access2": {
        "col": 23,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 1009,
        "snippet": " 1006|        let mut data = self.data.lock();\n 1007|        data.points.push_back(latency);\n 1008|        data.sum += latency;\n>1009|        if data.points.len() >= MAX_SAMPLES {\n 1010|            let pop = data.points.pop_front().expect(\"data vector is not empty\");\n 1011|            data.sum -= pop; // This does not overflow because of how running sum is calculated\n 1012|        }\n",
        "sourceLine": " 1009|        if data.points.len() >= MAX_SAMPLES {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "sol.report [sui-core/src/authority_aggregator.rs:1686]",
          "consensus_adapter::LatencyObserver::report"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 1007,
        "name": "points",
        "sourceLine": " 1007|        data.points.push_back(latency);\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1251,
        "snippet": " 1248|        let mut iterator = self\n 1249|            .perpetual_tables\n 1250|            .owned_object_transaction_locks\n>1251|            .unbounded_iter()\n 1252|            // Make the max possible entry for this object ID.\n 1253|            .skip_prior_to(&(object_id, SequenceNumber::MAX, ObjectDigest::MAX))?;\n 1254|        Ok(iterator\n",
        "sourceLine": " 1251|            .unbounded_iter()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:457]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:457]",
          "sol.try_execute_immediately [sui-node/src/lib.rs:468]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.prepare_certificate [sui-core/src/authority.rs:1010]",
          "authority::AuthorityState::prepare_certificate",
          "sol.check_owned_locks [sui-core/src/authority.rs:1197]",
          "authority::AuthorityState::check_owned_locks",
          "sol.check_owned_object_locks_exist [sui-core/src/authority.rs:928]",
          "authority_store::AuthorityStore::check_owned_object_locks_exist",
          "sol.model.loop.for [sui-core/src/authority/authority_store.rs:1281]",
          "authority_store::AuthorityStore::check_owned_object_locks_exist.anon [sui-core/src/authority/authority_store.rs:1281]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store.rs:1282]",
          "authority_store::AuthorityStore::check_owned_object_locks_exist.anon [sui-core/src/authority/authority_store.rs:1282]",
          "sol.get_latest_lock_for_object_id [sui-core/src/authority/authority_store.rs:1283]",
          "authority_store::AuthorityStore::get_latest_lock_for_object_id"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1280,
        "snippet": " 1277|        let locks = self\n 1278|            .perpetual_tables\n 1279|            .owned_object_transaction_locks\n>1280|            .multi_get(objects)?;\n 1281|        for (lock, obj_ref) in locks.into_iter().zip(objects) {\n 1282|            if lock.is_none() {\n 1283|                let latest_lock = self.get_latest_lock_for_object_id(obj_ref.0)?;\n",
        "sourceLine": " 1280|            .multi_get(objects)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.prepare_certificate [sui-core/src/authority.rs:1010]",
          "authority::AuthorityState::prepare_certificate",
          "sol.check_owned_locks [sui-core/src/authority.rs:1197]",
          "authority::AuthorityState::check_owned_locks",
          "sol.check_owned_object_locks_exist [sui-core/src/authority.rs:928]",
          "authority_store::AuthorityStore::check_owned_object_locks_exist"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1251,
        "name": "owned_object_transaction_locks",
        "sourceLine": " 1251|            .unbounded_iter()\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 225,
        "snippet": " 222|        }\n 223|        for checkpoint_digest in checkpoints_to_prune {\n 224|            if let Some(next_digest) = checkpoint_digest.next_lexicographical() {\n>225|                checkpoints_batch.delete_range(\n 226|                    &checkpoint_db.checkpoint_by_digest,\n 227|                    &checkpoint_digest,\n 228|                    &next_digest,\n",
        "sourceLine": " 225|                checkpoints_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:223]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:223]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:224]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:224]"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 173,
        "snippet": " 170|        digest: &CheckpointDigest,\n 171|    ) -> Result<Option<VerifiedCheckpoint>, TypedStoreError> {\n 172|        self.checkpoint_by_digest\n>173|            .get(digest)\n 174|            .map(|maybe_checkpoint| maybe_checkpoint.map(|c| c.into()))\n 175|    }\n 176|\n",
        "sourceLine": " 173|            .get(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.get_highest_executed_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:135]",
          "mod::CheckpointStore::get_highest_executed_checkpoint",
          "sol.get_checkpoint_by_digest [sui-core/src/checkpoints/mod.rs:277]",
          "mod::CheckpointStore::get_checkpoint_by_digest"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 225,
        "name": "checkpoint_by_digest",
        "sourceLine": " 225|                checkpoints_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 954,
        "snippet": " 951|        // batch_update_objects), as effects_exists is used as a check in many places\n 952|        // for \"did the tx finish\".\n 953|        write_batch\n>954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n 955|            .insert_batch(\n 956|                &self.perpetual_tables.executed_effects,\n 957|                [(transaction_digest, effects_digest)],\n",
        "sourceLine": " 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.commit_certificate [sui-core/src/authority.rs:1106]",
          "authority::AuthorityState::commit_certificate",
          "sol.update_state [sui-core/src/authority.rs:3325]",
          "authority_store::AuthorityStore::update_state"
        ]
      },
      "access2": {
        "col": 41,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 337,
        "snippet": " 334|        &self,\n 335|        effects_digests: impl Iterator<Item = &'a TransactionEffectsDigest>,\n 336|    ) -> SuiResult<Vec<Option<TransactionEffects>>> {\n>337|        Ok(self.perpetual_tables.effects.multi_get(effects_digests)?)\n 338|    }\n 339|\n 340|    pub fn get_executed_effects(\n",
        "sourceLine": " 337|        Ok(self.perpetual_tables.effects.multi_get(effects_digests)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.execute_transaction_block [sui-core/src/quorum_driver/mod.rs:505]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_transaction_block",
          "sol.submit [sui-core/src/transaction_orchestrator.rs:196]",
          "transaction_orchestrator::TransactiondOrchestrator::submit",
          "sol.notify_read_executed_effects [sui-core/src/transaction_orchestrator.rs:293]",
          "authority_notify_read::Arc::notify_read_executed_effects",
          "sol.multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:54]",
          "authority_notify_read::Arc::multi_get_executed_effects",
          "authority_store::AuthorityStore::multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:117]",
          "sol.multi_get_effects [sui-core/src/authority/authority_store.rs:367]",
          "authority_store::AuthorityStore::multi_get_effects"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 954,
        "name": "effects",
        "sourceLine": " 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 261,
        "snippet": " 258|                .expect(\"Failed to fetch checkpoint\")\n 259|                .expect(\"Failed to retrieve earlier checkpoint by sequence number\");\n 260|            self.checkpoint_store\n>261|                .delete_full_checkpoint_contents(prune_seq)\n 262|                .expect(\"Failed to delete full checkpoint contents\");\n 263|            self.checkpoint_store\n 264|                .delete_contents_digest_sequence_number_mapping(&prune_checkpoint.content_digest)\n",
        "sourceLine": " 261|                .delete_full_checkpoint_contents(prune_seq)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.model.macro.tokio::select.!2 [sui-core/src/checkpoints/checkpoint_executor/mod.rs:178]",
          "mod::CheckpointExecutor::process_executed_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:178]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:253]",
          "mod::CheckpointExecutor::process_executed_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:253]"
        ]
      },
      "access2": {
        "col": 30,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/storage.rs",
        "line": 55,
        "snippet": " 52|        &self,\n 53|        digest: &CheckpointDigest,\n 54|    ) -> Result<Option<VerifiedCheckpoint>, Self::Error> {\n>55|        self.checkpoint_store.get_checkpoint_by_digest(digest)\n 56|    }\n 57|\n 58|    fn get_checkpoint_by_sequence_number(\n",
        "sourceLine": " 55|        self.checkpoint_store.get_checkpoint_by_digest(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.get_highest_executed_checkpoint [sui-core/src/authority/authority_store_pruner.rs:258]",
          "mod::CheckpointStore::get_highest_executed_checkpoint",
          "sol.get_checkpoint_by_digest [sui-core/src/checkpoints/mod.rs:277]",
          "storage::RocksDbStore::get_checkpoint_by_digest"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 261,
        "name": "checkpoint_store",
        "sourceLine": " 261|                .delete_full_checkpoint_contents(prune_seq)\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1524,
        "snippet": " 1521|                &self.perpetual_tables.transactions,\n 1522|                [(transaction.digest(), transaction.serializable_ref())],\n 1523|            )?\n>1524|            .insert_batch(\n 1525|                &self.perpetual_tables.effects,\n 1526|                [(transaction_effects.digest(), transaction_effects)],\n 1527|            )?;\n",
        "sourceLine": " 1524|            .insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.augment_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:837]",
          "mod::CheckpointBuilder::augment_epoch_last_checkpoint",
          "sol.create_and_execute_advance_epoch_tx [sui-core/src/checkpoints/mod.rs:967]",
          "authority::AuthorityState::create_and_execute_advance_epoch_tx",
          "sol.insert_transaction_and_effects [sui-core/src/authority.rs:3803]",
          "authority_store::AuthorityStore::insert_transaction_and_effects"
        ]
      },
      "access2": {
        "col": 41,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 337,
        "snippet": " 334|        &self,\n 335|        effects_digests: impl Iterator<Item = &'a TransactionEffectsDigest>,\n 336|    ) -> SuiResult<Vec<Option<TransactionEffects>>> {\n>337|        Ok(self.perpetual_tables.effects.multi_get(effects_digests)?)\n 338|    }\n 339|\n 340|    pub fn get_executed_effects(\n",
        "sourceLine": " 337|        Ok(self.perpetual_tables.effects.multi_get(effects_digests)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.execute_transaction_block [sui-core/src/quorum_driver/mod.rs:505]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_transaction_block",
          "sol.submit [sui-core/src/transaction_orchestrator.rs:196]",
          "transaction_orchestrator::TransactiondOrchestrator::submit",
          "sol.notify_read_executed_effects [sui-core/src/transaction_orchestrator.rs:293]",
          "authority_notify_read::Arc::notify_read_executed_effects",
          "sol.multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:54]",
          "authority_notify_read::Arc::multi_get_executed_effects",
          "authority_store::AuthorityStore::multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:117]",
          "sol.multi_get_effects [sui-core/src/authority/authority_store.rs:367]",
          "authority_store::AuthorityStore::multi_get_effects"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1524,
        "name": "effects",
        "sourceLine": " 1524|            .insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1524,
        "snippet": " 1521|                &self.perpetual_tables.transactions,\n 1522|                [(transaction.digest(), transaction.serializable_ref())],\n 1523|            )?\n>1524|            .insert_batch(\n 1525|                &self.perpetual_tables.effects,\n 1526|                [(transaction_effects.digest(), transaction_effects)],\n 1527|            )?;\n",
        "sourceLine": " 1524|            .insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.augment_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:837]",
          "mod::CheckpointBuilder::augment_epoch_last_checkpoint",
          "sol.create_and_execute_advance_epoch_tx [sui-core/src/checkpoints/mod.rs:967]",
          "authority::AuthorityState::create_and_execute_advance_epoch_tx",
          "sol.insert_transaction_and_effects [sui-core/src/authority.rs:3803]",
          "authority_store::AuthorityStore::insert_transaction_and_effects"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 511,
        "snippet": " 508|            .authority_store\n 509|            .perpetual_tables\n 510|            .effects\n>511|            .get(&execution_digests.effects)\n 512|            .expect(\"Fetching effects for change_epoch tx cannot fail\")\n 513|            .expect(\"Change_epoch tx effects must exist\");\n 514|\n",
        "sourceLine": " 511|            .get(&execution_digests.effects)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1524,
        "name": "effects",
        "sourceLine": " 1524|            .insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1524,
        "snippet": " 1521|                &self.perpetual_tables.transactions,\n 1522|                [(transaction.digest(), transaction.serializable_ref())],\n 1523|            )?\n>1524|            .insert_batch(\n 1525|                &self.perpetual_tables.effects,\n 1526|                [(transaction_effects.digest(), transaction_effects)],\n 1527|            )?;\n",
        "sourceLine": " 1524|            .insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.augment_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:837]",
          "mod::CheckpointBuilder::augment_epoch_last_checkpoint",
          "sol.create_and_execute_advance_epoch_tx [sui-core/src/checkpoints/mod.rs:967]",
          "authority::AuthorityState::create_and_execute_advance_epoch_tx",
          "sol.insert_transaction_and_effects [sui-core/src/authority.rs:3803]",
          "authority_store::AuthorityStore::insert_transaction_and_effects"
        ]
      },
      "access2": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 345,
        "snippet": " 342|                .ok_or_else(|| anyhow::anyhow!(\"checkpoint content data is missing\"))?;\n 343|            let effects = perpetual_db\n 344|                .effects\n>345|                .multi_get(content.iter().map(|tx| tx.effects))?;\n 346|\n 347|            checkpoints_to_prune.push(*checkpoint.digest());\n 348|            checkpoint_content_to_prune.push(content);\n",
        "sourceLine": " 345|                .multi_get(content.iter().map(|tx| tx.effects))?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1524,
        "name": "effects",
        "sourceLine": " 1524|            .insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 189,
        "snippet": " 186|        for effects in effects_to_prune {\n 187|            let effects_digest = effects.digest();\n 188|            if let Some(next_digest) = effects.digest().next_lexicographical() {\n>189|                perpetual_batch.delete_range(\n 190|                    &perpetual_db.effects,\n 191|                    &effects_digest,\n 192|                    &next_digest,\n",
        "sourceLine": " 189|                perpetual_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:186]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:186]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:188]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:188]"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 511,
        "snippet": " 508|            .authority_store\n 509|            .perpetual_tables\n 510|            .effects\n>511|            .get(&execution_digests.effects)\n 512|            .expect(\"Fetching effects for change_epoch tx cannot fail\")\n 513|            .expect(\"Change_epoch tx effects must exist\");\n 514|\n",
        "sourceLine": " 511|            .get(&execution_digests.effects)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 189,
        "name": "effects",
        "sourceLine": " 189|                perpetual_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 954,
        "snippet": " 951|        // batch_update_objects), as effects_exists is used as a check in many places\n 952|        // for \"did the tx finish\".\n 953|        write_batch\n>954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n 955|            .insert_batch(\n 956|                &self.perpetual_tables.executed_effects,\n 957|                [(transaction_digest, effects_digest)],\n",
        "sourceLine": " 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:457]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:457]",
          "sol.try_execute_immediately [sui-node/src/lib.rs:468]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.commit_certificate [sui-core/src/authority.rs:1106]",
          "authority::AuthorityState::commit_certificate",
          "sol.update_state [sui-core/src/authority.rs:3325]",
          "authority_store::AuthorityStore::update_state"
        ]
      },
      "access2": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 345,
        "snippet": " 342|                .ok_or_else(|| anyhow::anyhow!(\"checkpoint content data is missing\"))?;\n 343|            let effects = perpetual_db\n 344|                .effects\n>345|                .multi_get(content.iter().map(|tx| tx.effects))?;\n 346|\n 347|            checkpoints_to_prune.push(*checkpoint.digest());\n 348|            checkpoint_content_to_prune.push(content);\n",
        "sourceLine": " 345|                .multi_get(content.iter().map(|tx| tx.effects))?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 954,
        "name": "effects",
        "sourceLine": " 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 954,
        "snippet": " 951|        // batch_update_objects), as effects_exists is used as a check in many places\n 952|        // for \"did the tx finish\".\n 953|        write_batch\n>954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n 955|            .insert_batch(\n 956|                &self.perpetual_tables.executed_effects,\n 957|                [(transaction_digest, effects_digest)],\n",
        "sourceLine": " 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.commit_certificate [sui-core/src/authority.rs:1106]",
          "authority::AuthorityState::commit_certificate",
          "sol.update_state [sui-core/src/authority.rs:3325]",
          "authority_store::AuthorityStore::update_state"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
        "line": 511,
        "snippet": " 508|            .authority_store\n 509|            .perpetual_tables\n 510|            .effects\n>511|            .get(&execution_digests.effects)\n 512|            .expect(\"Fetching effects for change_epoch tx cannot fail\")\n 513|            .expect(\"Change_epoch tx effects must exist\");\n 514|\n",
        "sourceLine": " 511|            .get(&execution_digests.effects)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 954,
        "name": "effects",
        "sourceLine": " 954|            .insert_batch(&self.perpetual_tables.effects, [(effects_digest, effects)])?\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_per_epoch_store.rs",
        "line": 820,
        "snippet": " 817|\n 818|    pub fn per_epoch_finalized_txns_enabled(&self) -> bool {\n 819|        self.epoch_start_configuration\n>820|            .flags()\n 821|            .contains(&EpochFlag::PerEpochFinalizedTransactions)\n 822|    }\n 823|\n",
        "sourceLine": " 820|            .flags()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
          "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
          "mod::CheckpointExecutor::execute_change_epoch_tx",
          "sol.handle_execution_effects [sui-core/src/checkpoints/checkpoint_executor/mod.rs:532]",
          "mod::handle_execution_effects",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:648]",
          "mod::handle_execution_effects.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:648]",
          "mod::handle_execution_effects.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:722]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:740]",
          "mod::handle_execution_effects.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:740]",
          "sol.finalize_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:741]",
          "mod::finalize_checkpoint",
          "sol.per_epoch_finalized_txns_enabled [sui-core/src/checkpoints/checkpoint_executor/mod.rs:983]",
          "authority_per_epoch_store::AuthorityPerEpochStore::per_epoch_finalized_txns_enabled"
        ]
      },
      "access2": {
        "col": 39,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_per_epoch_store.rs",
        "line": 491,
        "snippet": " 488|    }\n 489|\n 490|    pub fn epoch_start_state(&self) -> &EpochStartSystemState {\n>491|        self.epoch_start_configuration.epoch_start_state()\n 492|    }\n 493|\n 494|    pub fn get_chain_identifier(&self) -> ChainIdentifier {\n",
        "sourceLine": " 491|        self.epoch_start_configuration.epoch_start_state()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.augment_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:837]",
          "mod::CheckpointBuilder::augment_epoch_last_checkpoint",
          "sol.create_and_execute_advance_epoch_tx [sui-core/src/checkpoints/mod.rs:967]",
          "authority::AuthorityState::create_and_execute_advance_epoch_tx",
          "sol.protocol_version [sui-core/src/authority.rs:3708]",
          "authority_per_epoch_store::AuthorityPerEpochStore::protocol_version",
          "authority_per_epoch_store::AuthorityPerEpochStore::epoch_start_state [sui-core/src/authority/authority_per_epoch_store.rs:560]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_per_epoch_store.rs",
        "line": 820,
        "name": "epoch_start_configuration",
        "sourceLine": " 820|            .flags()\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 440,
        "snippet": " 437|    fn get_object(&self, object_id: &ObjectID) -> Result<Option<Object>, SuiError> {\n 438|        let obj_entry = self\n 439|            .objects\n>440|            .unbounded_iter()\n 441|            .skip_prior_to(&ObjectKey::max_for_id(object_id))?\n 442|            .next();\n 443|\n",
        "sourceLine": " 440|            .unbounded_iter()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4180]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4180]",
          "sol.get_object [sui-core/src/authority.rs:4181]",
          "authority_store_tables::AuthorityPerpetualTables::get_object"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 459,
        "snippet": " 456|    ) -> Result<Option<Object>, SuiError> {\n 457|        Ok(self\n 458|            .objects\n>459|            .get(&ObjectKey(*object_id, version))?\n 460|            .map(|object| self.object(&ObjectKey(*object_id, version), object))\n 461|            .transpose()?\n 462|            .flatten())\n",
        "sourceLine": " 459|            .get(&ObjectKey(*object_id, version))?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
          "sol.load_fastpath_input_objects [sui-core/src/authority_server.rs:404]",
          "authority::AuthorityState::load_fastpath_input_objects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1912]",
          "authority::AuthorityState::load_fastpath_input_objects.anon [sui-core/src/authority.rs:1912]",
          "sol.get_object_by_key [sui-core/src/authority.rs:1913]",
          "authority_store_tables::AuthorityPerpetualTables::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 440,
        "name": "objects",
        "sourceLine": " 440|            .unbounded_iter()\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 20,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1423,
        "snippet": " 1420|            .iter()\n 1421|            .chain(effects.wrapped().iter())\n 1422|            .map(|obj_ref| ObjectKey(obj_ref.0, obj_ref.1));\n>1423|        write_batch.delete_batch(&self.perpetual_tables.objects, tombstones)?;\n 1424|\n 1425|        let all_new_object_keys = effects\n 1426|            .mutated()\n",
        "sourceLine": " 1423|        write_batch.delete_batch(&self.perpetual_tables.objects, tombstones)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.revert_uncommitted_epoch_transactions [sui-core/src/authority.rs:2106]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions",
          "sol.model.loop.for [sui-core/src/authority.rs:3844]",
          "authority::AuthorityState::revert_uncommitted_epoch_transactions.anon [sui-core/src/authority.rs:3844]",
          "sol.revert_state_update [sui-core/src/authority.rs:3858]",
          "authority_store::AuthorityStore::revert_state_update"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 459,
        "snippet": " 456|    ) -> Result<Option<Object>, SuiError> {\n 457|        Ok(self\n 458|            .objects\n>459|            .get(&ObjectKey(*object_id, version))?\n 460|            .map(|object| self.object(&ObjectKey(*object_id, version), object))\n 461|            .transpose()?\n 462|            .flatten())\n",
        "sourceLine": " 459|            .get(&ObjectKey(*object_id, version))?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4188]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4188]",
          "sol.get_object_by_key [sui-core/src/authority.rs:4189]",
          "authority_store_tables::AuthorityPerpetualTables::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 1423,
        "name": "objects",
        "sourceLine": " 1423|        write_batch.delete_batch(&self.perpetual_tables.objects, tombstones)?;\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 60,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 789,
        "snippet": " 786|        &self,\n 787|        objects: &Vec<Object>,\n 788|    ) -> SuiResult {\n>789|        let mut write_batch = self.perpetual_tables.objects.batch();\n 790|\n 791|        for obj in objects {\n 792|            let StoreObjectPair(store_object, indirect_object) =\n",
        "sourceLine": " 789|        let mut write_batch = self.perpetual_tables.objects.batch();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fullnode_fast_path_insert_objects_to_object_store_maybe [sui-core/src/authority.rs:792]",
          "authority_store::AuthorityStore::fullnode_fast_path_insert_objects_to_object_store_maybe"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 459,
        "snippet": " 456|    ) -> Result<Option<Object>, SuiError> {\n 457|        Ok(self\n 458|            .objects\n>459|            .get(&ObjectKey(*object_id, version))?\n 460|            .map(|object| self.object(&ObjectKey(*object_id, version), object))\n 461|            .transpose()?\n 462|            .flatten())\n",
        "sourceLine": " 459|            .get(&ObjectKey(*object_id, version))?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4188]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4188]",
          "sol.get_object_by_key [sui-core/src/authority.rs:4189]",
          "authority_store_tables::AuthorityPerpetualTables::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 789,
        "name": "objects",
        "sourceLine": " 789|        let mut write_batch = self.perpetual_tables.objects.batch();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 55,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 162,
        "snippet": " 159|    ) -> anyhow::Result<()> {\n 160|        let _scope = monitored_scope(\"EffectsLivePruner\");\n 161|\n>162|        let mut perpetual_batch = perpetual_db.objects.batch();\n 163|        let transactions = checkpoint_content_to_prune\n 164|            .iter()\n 165|            .flat_map(|content| content.iter().map(|tx| tx.transaction));\n",
        "sourceLine": " 162|        let mut perpetual_batch = perpetual_db.objects.batch();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 459,
        "snippet": " 456|    ) -> Result<Option<Object>, SuiError> {\n 457|        Ok(self\n 458|            .objects\n>459|            .get(&ObjectKey(*object_id, version))?\n 460|            .map(|object| self.object(&ObjectKey(*object_id, version), object))\n 461|            .transpose()?\n 462|            .flatten())\n",
        "sourceLine": " 459|            .get(&ObjectKey(*object_id, version))?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4188]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4188]",
          "sol.get_object_by_key [sui-core/src/authority.rs:4189]",
          "authority_store_tables::AuthorityPerpetualTables::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 162,
        "name": "objects",
        "sourceLine": " 162|        let mut perpetual_batch = perpetual_db.objects.batch();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 33,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 441,
        "snippet": " 438|            );\n 439|            let start_key: ObjectKey = bcs::from_bytes(sst_file.start_key.as_ref().unwrap())?;\n 440|            let end_key: ObjectKey = bcs::from_bytes(sst_file.end_key.as_ref().unwrap())?;\n>441|            perpetual_db.objects.compact_range(&start_key, &end_key)?;\n 442|        }\n 443|        Ok(())\n 444|    }\n",
        "sourceLine": " 441|            perpetual_db.objects.compact_range(&start_key, &end_key)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:478]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:478]",
          "sol.spawn_monitored_task [sui-core/src/authority/authority_store_pruner.rs:479]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:479]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:480]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:480]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:482]",
          "sol.Self::compact_next_sst_file [sui-core/src/authority/authority_store_pruner.rs:483]",
          "authority_store_pruner::AuthorityStorePruner::compact_next_sst_file",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:434]",
          "authority_store_pruner::AuthorityStorePruner::compact_next_sst_file.anon [sui-core/src/authority/authority_store_pruner.rs:434]"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 459,
        "snippet": " 456|    ) -> Result<Option<Object>, SuiError> {\n 457|        Ok(self\n 458|            .objects\n>459|            .get(&ObjectKey(*object_id, version))?\n 460|            .map(|object| self.object(&ObjectKey(*object_id, version), object))\n 461|            .transpose()?\n 462|            .flatten())\n",
        "sourceLine": " 459|            .get(&ObjectKey(*object_id, version))?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4188]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4188]",
          "sol.get_object_by_key [sui-core/src/authority.rs:4189]",
          "authority_store_tables::AuthorityPerpetualTables::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 441,
        "name": "objects",
        "sourceLine": " 441|            perpetual_db.objects.compact_range(&start_key, &end_key)?;\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 150,
        "snippet": " 147|        version: SequenceNumber,\n 148|    ) -> Option<Object> {\n 149|        let Ok(iter) = self.objects\n>150|            .range_iter(ObjectKey::min_for_id(&object_id)..=ObjectKey::max_for_id(&object_id))\n 151|            .skip_prior_to(&ObjectKey(object_id, version))else {\n 152|            return None\n 153|        };\n",
        "sourceLine": " 150|            .range_iter(ObjectKey::min_for_id(&object_id)..=ObjectKey::max_for_id(&object_id))\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:457]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:457]",
          "sol.try_execute_immediately [sui-node/src/lib.rs:468]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.commit_cert_and_notify [sui-core/src/authority.rs:1060]",
          "authority::AuthorityState::commit_cert_and_notify",
          "sol.post_process_one_tx [sui-core/src/authority.rs:1124]",
          "authority::AuthorityState::post_process_one_tx",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1744]",
          "authority::AuthorityState::post_process_one_tx.anon [sui-core/src/authority.rs:1744]",
          "sol.index_tx [sui-core/src/authority.rs:1746]",
          "authority::AuthorityState::index_tx",
          "sol.process_object_index [sui-core/src/authority.rs:1525]",
          "authority::AuthorityState::process_object_index",
          "sol.model.loop.for [sui-core/src/authority.rs:1587]",
          "authority::AuthorityState::process_object_index.anon [sui-core/src/authority.rs:1587]",
          "authority::AuthorityState::process_object_index.anon [sui-core/src/authority.rs:1612]",
          "sol.try_create_dynamic_field_info [sui-core/src/authority.rs:1640]",
          "authority::AuthorityState::try_create_dynamic_field_info",
          "authority::AuthorityState::try_create_dynamic_field_info.anon [sui-core/src/authority.rs:1692]",
          "sol.find_object_lt_or_eq_version [sui-core/src/authority.rs:1695]",
          "authority_store_tables::AuthorityPerpetualTables::find_object_lt_or_eq_version"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 459,
        "snippet": " 456|    ) -> Result<Option<Object>, SuiError> {\n 457|        Ok(self\n 458|            .objects\n>459|            .get(&ObjectKey(*object_id, version))?\n 460|            .map(|object| self.object(&ObjectKey(*object_id, version), object))\n 461|            .transpose()?\n 462|            .flatten())\n",
        "sourceLine": " 459|            .get(&ObjectKey(*object_id, version))?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "sol.spawn_monitored_task [sui-core/src/authority.rs:2017]",
          "sol.execution_process [sui-core/src/authority.rs:2017]",
          "execution_driver::execution_process",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:45]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:45]",
          "sol.spawn_monitored_task [sui-core/src/execution_driver.rs:90]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:90]",
          "sol.model.loop.infinite [sui-core/src/execution_driver.rs:97]",
          "execution_driver::execution_process.anon [sui-core/src/execution_driver.rs:97]",
          "sol.try_execute_immediately [sui-core/src/execution_driver.rs:100]",
          "authority::AuthorityState::try_execute_immediately",
          "sol.process_certificate [sui-core/src/authority.rs:890]",
          "authority::AuthorityState::process_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1021]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1021]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:1022]",
          "authority::AuthorityState::process_certificate.anon [sui-core/src/authority.rs:1022]",
          "sol.debug_dump_transaction_state [sui-core/src/authority.rs:1024]",
          "authority::AuthorityState::debug_dump_transaction_state",
          "authority::NodeStateDump::new [sui-core/src/authority.rs:951]",
          "sol.model.loop.for [sui-core/src/authority.rs:4188]",
          "authority::NodeStateDump::new.anon [sui-core/src/authority.rs:4188]",
          "sol.get_object_by_key [sui-core/src/authority.rs:4189]",
          "authority_store_tables::AuthorityPerpetualTables::get_object_by_key"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_tables.rs",
        "line": 150,
        "name": "objects",
        "sourceLine": " 150|            .range_iter(ObjectKey::min_for_id(&object_id)..=ObjectKey::max_for_id(&object_id))\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/epoch/committee_store.rs",
        "line": 77,
        "snippet": " 74|        } else {\n 75|            self.tables\n 76|                .committee_map\n>77|                .insert(&new_committee.epoch, new_committee)?;\n 78|            self.cache\n 79|                .write()\n 80|                .insert(new_committee.epoch, Arc::new(new_committee.clone()));\n",
        "sourceLine": " 77|                .insert(&new_committee.epoch, new_committee)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.insert_new_committee [sui-core/src/authority.rs:2103]",
          "committee_store::CommitteeStore::insert_new_committee",
          "sol.model.ifTrueElse [sui-core/src/epoch/committee_store.rs:71]",
          "committee_store::CommitteeStore::insert_new_committee.anon [sui-core/src/epoch/committee_store.rs:71]"
        ]
      },
      "access2": {
        "col": 45,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/safe_client.rs",
        "line": 264,
        "snippet": " 261|                let signed_effects = self.check_signed_effects_plain(digest, effects, None)?;\n 262|                match cert_opt {\n 263|                    Some(cert) => {\n>264|                        let committee = self.get_committee(&cert.epoch)?;\n 265|                        let ct = CertifiedTransaction::new_from_data_and_sig(\n 266|                            transaction.into_message(),\n 267|                            cert,\n",
        "sourceLine": " 264|                        let committee = self.get_committee(&cert.epoch)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.handle_transaction_info_request_from_some_validators [sui-core/src/quorum_driver/mod.rs:457]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1828]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1829]",
          "sol.handle_transaction_info_request [sui-core/src/authority_aggregator.rs:1831]",
          "safe_client::SafeClient::handle_transaction_info_request",
          "safe_client::SafeClient::handle_transaction_info_request.anon [sui-core/src/safe_client.rs:495]",
          "sol.check_transaction_info [sui-core/src/safe_client.rs:496]",
          "safe_client::SafeClient::check_transaction_info",
          "safe_client::SafeClient::check_transaction_info.anon [sui-core/src/safe_client.rs:260]",
          "safe_client::SafeClient::check_transaction_info.anon [sui-core/src/safe_client.rs:262]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/epoch/committee_store.rs",
        "line": 77,
        "name": "epoch",
        "sourceLine": " 77|                .insert(&new_committee.epoch, new_committee)?;\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/epoch/committee_store.rs",
        "line": 77,
        "snippet": " 74|        } else {\n 75|            self.tables\n 76|                .committee_map\n>77|                .insert(&new_committee.epoch, new_committee)?;\n 78|            self.cache\n 79|                .write()\n 80|                .insert(new_committee.epoch, Arc::new(new_committee.clone()));\n",
        "sourceLine": " 77|                .insert(&new_committee.epoch, new_committee)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.insert_new_committee [sui-core/src/authority.rs:2103]",
          "committee_store::CommitteeStore::insert_new_committee",
          "sol.model.ifTrueElse [sui-core/src/epoch/committee_store.rs:71]",
          "committee_store::CommitteeStore::insert_new_committee.anon [sui-core/src/epoch/committee_store.rs:71]"
        ]
      },
      "access2": {
        "col": 11,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/signature_verifier.rs",
        "line": 162,
        "snippet": " 159|    ) -> SuiResult<VerifiedCertificate> {\n 160|        // this is the only innocent error we are likely to encounter - filter it before we poison\n 161|        // a whole batch.\n>162|        if cert.auth_sig().epoch != self.committee.epoch() {\n 163|            return Err(SuiError::WrongEpoch {\n 164|                expected_epoch: self.committee.epoch(),\n 165|                actual_epoch: cert.auth_sig().epoch,\n",
        "sourceLine": " 162|        if cert.auth_sig().epoch != self.committee.epoch() {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:434]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:435]",
          "sol.verify_cert [sui-core/src/authority_server.rs:439]",
          "signature_verifier::SignatureVerifier::verify_cert",
          "sol.verify_cert_skip_cache [sui-core/src/signature_verifier.rs:150]",
          "signature_verifier::SignatureVerifier::verify_cert_skip_cache"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/epoch/committee_store.rs",
        "line": 77,
        "name": "epoch",
        "sourceLine": " 77|                .insert(&new_committee.epoch, new_committee)?;\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 34,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 211,
        "snippet": " 208|        for checkpoint_content in checkpoint_content_to_prune {\n 209|            let content_digest = *checkpoint_content.digest();\n 210|            if let Some(next_digest) = content_digest.next_lexicographical() {\n>211|                checkpoints_batch.delete_range(\n 212|                    &checkpoint_db.checkpoint_content,\n 213|                    &content_digest,\n 214|                    &next_digest,\n",
        "sourceLine": " 211|                checkpoints_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:208]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:208]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:210]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:210]"
        ]
      },
      "access2": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 294,
        "snippet": " 291|        &self,\n 292|        digest: &CheckpointContentsDigest,\n 293|    ) -> Result<Option<CheckpointContents>, TypedStoreError> {\n>294|        self.checkpoint_content.get(digest)\n 295|    }\n 296|\n 297|    pub fn get_full_checkpoint_contents_by_sequence_number(\n",
        "sourceLine": " 294|        self.checkpoint_content.get(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
          "sol.extract_end_of_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:559]",
          "mod::extract_end_of_epoch_tx",
          "mod::CheckpointStore::get_checkpoint_contents [sui-core/src/checkpoints/checkpoint_executor/mod.rs:802]"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 211,
        "name": "checkpoint_content",
        "sourceLine": " 211|                checkpoints_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 481,
        "snippet": " 478|    pub fn checkpoint_db(&self, path: &Path) -> SuiResult {\n 479|        // This checkpoints the entire db and not one column family\n 480|        self.checkpoint_content\n>481|            .checkpoint_db(path)\n 482|            .map_err(SuiError::StorageError)\n 483|    }\n 484|\n",
        "sourceLine": " 481|            .checkpoint_db(path)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:2117]",
          "authority::AuthorityState::reconfigure.anon [sui-core/src/authority.rs:2117]",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:2118]",
          "authority::AuthorityState::reconfigure.anon [sui-core/src/authority.rs:2118]",
          "sol.checkpoint_all_dbs [sui-core/src/authority.rs:2129]",
          "authority::AuthorityState::checkpoint_all_dbs",
          "sol.checkpoint_db [sui-core/src/authority.rs:2234]",
          "mod::CheckpointStore::checkpoint_db"
        ]
      },
      "access2": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 294,
        "snippet": " 291|        &self,\n 292|        digest: &CheckpointContentsDigest,\n 293|    ) -> Result<Option<CheckpointContents>, TypedStoreError> {\n>294|        self.checkpoint_content.get(digest)\n 295|    }\n 296|\n 297|    pub fn get_full_checkpoint_contents_by_sequence_number(\n",
        "sourceLine": " 294|        self.checkpoint_content.get(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.get_checkpoint_contents [sui-core/src/authority/authority_store_pruner.rs:341]",
          "mod::CheckpointStore::get_checkpoint_contents"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 481,
        "name": "checkpoint_content",
        "sourceLine": " 481|            .checkpoint_db(path)\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 24,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 383,
        "snippet": " 380|            checkpoint.sequence_number(),\n 381|            seq_number);\n 382|        }\n>383|        self.watermarks.insert(\n 384|            &CheckpointWatermark::HighestExecuted,\n 385|            &(*checkpoint.sequence_number(), *checkpoint.digest()),\n 386|        )\n",
        "sourceLine": " 383|        self.watermarks.insert(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
          "sol.model.macro.tokio::select.!2 [sui-core/src/checkpoints/checkpoint_executor/mod.rs:178]",
          "mod::CheckpointExecutor::process_executed_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:178]",
          "sol.update_highest_executed_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:269]",
          "mod::CheckpointStore::update_highest_executed_checkpoint"
        ]
      },
      "access2": {
        "col": 28,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 271,
        "snippet": " 268|        &self,\n 269|    ) -> Result<Option<VerifiedCheckpoint>, TypedStoreError> {\n 270|        let highest_executed = if let Some(highest_executed) =\n>271|            self.watermarks.get(&CheckpointWatermark::HighestExecuted)?\n 272|        {\n 273|            highest_executed\n 274|        } else {\n",
        "sourceLine": " 271|            self.watermarks.get(&CheckpointWatermark::HighestExecuted)?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.get_highest_executed_checkpoint [sui-core/src/authority/authority_store_pruner.rs:258]",
          "mod::CheckpointStore::get_highest_executed_checkpoint"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 383,
        "name": "watermarks",
        "sourceLine": " 383|        self.watermarks.insert(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 26,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 232,
        "snippet": " 229|                )?;\n 230|            }\n 231|        }\n>232|        checkpoints_batch.insert_batch(\n 233|            &checkpoint_db.watermarks,\n 234|            [(\n 235|                &CheckpointWatermark::HighestPruned,\n",
        "sourceLine": " 232|        checkpoints_batch.insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints"
        ]
      },
      "access2": {
        "col": 28,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 271,
        "snippet": " 268|        &self,\n 269|    ) -> Result<Option<VerifiedCheckpoint>, TypedStoreError> {\n 270|        let highest_executed = if let Some(highest_executed) =\n>271|            self.watermarks.get(&CheckpointWatermark::HighestExecuted)?\n 272|        {\n 273|            highest_executed\n 274|        } else {\n",
        "sourceLine": " 271|            self.watermarks.get(&CheckpointWatermark::HighestExecuted)?\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.run_epoch [sui-node/src/lib.rs:1094]",
          "mod::CheckpointExecutor::run_epoch",
          "sol.get_highest_executed_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:135]",
          "mod::CheckpointStore::get_highest_executed_checkpoint"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 232,
        "name": "watermarks",
        "sourceLine": " 232|        checkpoints_batch.insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 17,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/epoch/committee_store.rs",
        "line": 77,
        "snippet": " 74|        } else {\n 75|            self.tables\n 76|                .committee_map\n>77|                .insert(&new_committee.epoch, new_committee)?;\n 78|            self.cache\n 79|                .write()\n 80|                .insert(new_committee.epoch, Arc::new(new_committee.clone()));\n",
        "sourceLine": " 77|                .insert(&new_committee.epoch, new_committee)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.reconfigure_state [sui-node/src/lib.rs:1174]",
          "lib::SuiNode::reconfigure_state",
          "sol.reconfigure [sui-node/src/lib.rs:1266]",
          "authority::AuthorityState::reconfigure",
          "sol.insert_new_committee [sui-core/src/authority.rs:2103]",
          "committee_store::CommitteeStore::insert_new_committee",
          "sol.model.ifTrueElse [sui-core/src/epoch/committee_store.rs:71]",
          "committee_store::CommitteeStore::insert_new_committee.anon [sui-core/src/epoch/committee_store.rs:71]"
        ]
      },
      "access2": {
        "col": 11,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 716,
        "snippet": " 713|        input_keys: Vec<InputKey>,\n 714|        update_cache: bool,\n 715|    ) {\n>716|        if inner.epoch != epoch_store.epoch() {\n 717|            warn!(\n 718|                \"Ignoring objects committed from wrong epoch. Expected={} Actual={} \\\n 719|                 Objects={:?}\",\n",
        "sourceLine": " 716|        if inner.epoch != epoch_store.epoch() {\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:129]",
          "sol.spawn_monitored_task [sui-core/src/transaction_orchestrator.rs:130]",
          "transaction_orchestrator::TransactiondOrchestrator::new.anon [sui-core/src/transaction_orchestrator.rs:130]",
          "sol.Self::loop_execute_finalized_tx_locally [sui-core/src/transaction_orchestrator.rs:131]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally",
          "sol.model.loop.infinite [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:388]",
          "transaction_orchestrator::TransactiondOrchestrator::loop_execute_finalized_tx_locally.anon [sui-core/src/transaction_orchestrator.rs:389]",
          "sol.Self::execute_finalized_tx_locally_with_timeout [sui-core/src/transaction_orchestrator.rs:409]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_finalized_tx_locally_with_timeout",
          "sol.fullnode_execute_certificate_with_effects [sui-core/src/transaction_orchestrator.rs:346]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects",
          "sol.model.ifTrueElse [sui-core/src/authority.rs:783]",
          "authority::AuthorityState::fullnode_execute_certificate_with_effects.anon [sui-core/src/authority.rs:783]",
          "sol.fastpath_objects_available [sui-core/src/authority.rs:793]",
          "transaction_manager::TransactionManager::fastpath_objects_available",
          "sol.objects_available_locked [sui-core/src/transaction_manager.rs:693]",
          "transaction_manager::TransactionManager::objects_available_locked"
        ]
      },
      "priority": 4,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/epoch/committee_store.rs",
        "line": 77,
        "name": "epoch",
        "sourceLine": " 77|                .insert(&new_committee.epoch, new_committee)?;\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 777,
        "snippet": " 774|                ) {\n 775|                    // todo - use NotifyRead::register_all might be faster\n 776|                    self.epoch_store\n>777|                        .consensus_message_processed_notify(\n 778|                            SequencedConsensusTransactionKey::External(\n 779|                                ConsensusTransactionKey::Certificate(*effects.transaction_digest()),\n 780|                            ),\n",
        "sourceLine": " 777|                        .consensus_message_processed_notify(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:757]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:764]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:764]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:771]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:771]"
        ]
      },
      "access2": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority.rs",
        "line": 2259,
        "snippet": " 2256|    /// the case. This also means we should minimize the number of call-sites. Only call it when\n 2257|    /// there is no way to obtain it from somewhere else.\n 2258|    pub fn load_epoch_store_one_call_per_task(&self) -> Guard<Arc<AuthorityPerEpochStore>> {\n>2259|        self.epoch_store.load()\n 2260|    }\n 2261|\n 2262|    // Load the epoch store, should be used in tests only.\n",
        "sourceLine": " 2259|        self.epoch_store.load()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.handle_transaction_info_request_from_some_validators [sui-core/src/quorum_driver/mod.rs:457]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1828]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1829]",
          "sol.handle_transaction_info_request [sui-core/src/authority_aggregator.rs:1831]",
          "authority::AuthorityState::handle_transaction_info_request",
          "sol.load_epoch_store_one_call_per_task [sui-core/src/authority.rs:1804]",
          "authority::AuthorityState::load_epoch_store_one_call_per_task"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 777,
        "name": "epoch_store",
        "sourceLine": " 777|                        .consensus_message_processed_notify(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 500,
        "snippet": " 497|        // So missing objects' availability are checked again after releasing the TM lock.\n 498|        let cache_miss_availibility = self\n 499|            .authority_store\n>500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n 501|            .expect(\"Checking object existence cannot fail!\")\n 502|            .into_iter()\n 503|            .zip(input_object_cache_misses.into_iter());\n",
        "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "transaction_manager::TransactionManager::new [sui-core/src/authority.rs:1975]",
          "sol.enqueue [sui-core/src/transaction_manager.rs:378]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl"
        ]
      },
      "access2": {
        "col": 21,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 437,
        "snippet": " 434|                // skip already executed txes\n 435|                if self\n 436|                    .authority_store\n>437|                    .is_tx_already_executed(&digest)\n 438|                    .expect(\"Failed to check if tx is already executed\")\n 439|                {\n 440|                    // also ensure the transaction will not be retried after restart.\n",
        "sourceLine": " 437|                    .is_tx_already_executed(&digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 500,
        "name": "authority_store",
        "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 500,
        "snippet": " 497|        // So missing objects' availability are checked again after releasing the TM lock.\n 498|        let cache_miss_availibility = self\n 499|            .authority_store\n>500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n 501|            .expect(\"Checking object existence cannot fail!\")\n 502|            .into_iter()\n 503|            .zip(input_object_cache_misses.into_iter());\n",
        "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl"
        ]
      },
      "access2": {
        "col": 29,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/storage.rs",
        "line": 149,
        "snippet": " 146|        &self,\n 147|        digest: &TransactionEventsDigest,\n 148|    ) -> Result<Option<TransactionEvents>, Self::Error> {\n>149|        self.authority_store.get_events(digest)\n 150|    }\n 151|}\n 152|\n",
        "sourceLine": " 149|        self.authority_store.get_events(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:398]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:398]",
          "sol.get_transaction_events [sui-core/src/authority_server.rs:399]",
          "storage::RocksDbStore::get_transaction_events"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 500,
        "name": "authority_store",
        "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 8,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 278,
        "snippet": " 275|        effects: Vec<TransactionEffects>,\n 276|        protocol_config: &ProtocolConfig,\n 277|    ) -> Accumulator {\n>278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n 279|    }\n 280|\n 281|    /// Unions all checkpoint accumulators at the end of the epoch to generate the\n",
        "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.accumulate_checkpoint [sui-core/src/checkpoints/mod.rs:850]",
          "state_accumulator::StateAccumulator::accumulate_checkpoint",
          "state_accumulator::StateAccumulator::accumulate_effects [sui-core/src/state_accumulator.rs:260]"
        ]
      },
      "access2": {
        "col": 21,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/transaction_manager.rs",
        "line": 437,
        "snippet": " 434|                // skip already executed txes\n 435|                if self\n 436|                    .authority_store\n>437|                    .is_tx_already_executed(&digest)\n 438|                    .expect(\"Failed to check if tx is already executed\")\n 439|                {\n 440|                    // also ensure the transaction will not be retried after restart.\n",
        "sourceLine": " 437|                    .is_tx_already_executed(&digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 278,
        "name": "authority_store",
        "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 8,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 278,
        "snippet": " 275|        effects: Vec<TransactionEffects>,\n 276|        protocol_config: &ProtocolConfig,\n 277|    ) -> Accumulator {\n>278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n 279|    }\n 280|\n 281|    /// Unions all checkpoint accumulators at the end of the epoch to generate the\n",
        "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
          "sol.accumulate_checkpoint [sui-core/src/checkpoints/mod.rs:850]",
          "state_accumulator::StateAccumulator::accumulate_checkpoint",
          "state_accumulator::StateAccumulator::accumulate_effects [sui-core/src/state_accumulator.rs:260]"
        ]
      },
      "access2": {
        "col": 29,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/storage.rs",
        "line": 149,
        "snippet": " 146|        &self,\n 147|        digest: &TransactionEventsDigest,\n 148|    ) -> Result<Option<TransactionEvents>, Self::Error> {\n>149|        self.authority_store.get_events(digest)\n 150|    }\n 151|}\n 152|\n",
        "sourceLine": " 149|        self.authority_store.get_events(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
          "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
          "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
          "authority_aggregator::AuthorityAggregator::process_certificate",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
          "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
          "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
          "authority_server::ValidatorService::handle_certificate_v2",
          "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
          "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
          "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
          "authority_server::ValidatorService::handle_certificate",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
          "sol.model.ifTrueElse [sui-core/src/authority_server.rs:398]",
          "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:398]",
          "sol.get_transaction_events [sui-core/src/authority_server.rs:399]",
          "storage::RocksDbStore::get_transaction_events"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/state_accumulator.rs",
        "line": 278,
        "name": "authority_store",
        "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 18,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 324,
        "snippet": " 321|                [(checkpoint.digest(), checkpoint.serializable_ref())],\n 322|            )?;\n 323|        if checkpoint.next_epoch_committee().is_some() {\n>324|            batch.insert_batch(\n 325|                &self.epoch_last_checkpoint_map,\n 326|                [(&checkpoint.epoch(), checkpoint.sequence_number())],\n 327|            )?;\n",
        "sourceLine": " 324|            batch.insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1315]",
          "mod::CheckpointAggregator::run [sui-core/src/checkpoints/mod.rs:1315]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1067]",
          "mod::CheckpointAggregator::run.anon [sui-core/src/checkpoints/mod.rs:1067]",
          "sol.run_and_notify [sui-core/src/checkpoints/mod.rs:1068]",
          "mod::CheckpointAggregator::run_and_notify",
          "sol.run_inner [sui-core/src/checkpoints/mod.rs:1095]",
          "mod::CheckpointAggregator::run_inner",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1105]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1105]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:1134]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1134]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:1156]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1156]",
          "sol.insert_certified_checkpoint [sui-core/src/checkpoints/mod.rs:1164]",
          "mod::CheckpointStore::insert_certified_checkpoint",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:323]",
          "mod::CheckpointStore::insert_certified_checkpoint.anon [sui-core/src/checkpoints/mod.rs:323]"
        ]
      },
      "access2": {
        "col": 49,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 444,
        "snippet": " 441|        &self,\n 442|        epoch_id: EpochId,\n 443|    ) -> SuiResult<Option<VerifiedCheckpoint>> {\n>444|        let seq = self.epoch_last_checkpoint_map.get(&epoch_id)?;\n 445|        let checkpoint = match seq {\n 446|            Some(seq) => self.get_checkpoint_by_sequence_number(seq)?,\n 447|            None => None,\n",
        "sourceLine": " 444|        let seq = self.epoch_last_checkpoint_map.get(&epoch_id)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:736]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:736]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:738]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:738]",
          "sol.get_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:740]",
          "mod::CheckpointStore::get_epoch_last_checkpoint"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 324,
        "name": "epoch_last_checkpoint_map",
        "sourceLine": " 324|            batch.insert_batch(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 37,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 364,
        "snippet": " 361|        &self,\n 362|        new_low_scoring: Arc<ArcSwap<HashMap<AuthorityName, u64>>>,\n 363|    ) {\n>364|        self.low_scoring_authorities.swap(Arc::new(new_low_scoring));\n 365|    }\n 366|\n 367|    // todo - this probably need to hold some kind of lock to make sure epoch does not change while we are recovering\n",
        "sourceLine": " 364|        self.low_scoring_authorities.swap(Arc::new(new_low_scoring));\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.swap_low_scoring_authorities [sui-node/src/lib.rs:832]",
          "consensus_adapter::ConsensusAdapter::swap_low_scoring_authorities"
        ]
      },
      "access2": {
        "col": 67,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 498,
        "snippet": " 495|        &self,\n 496|        positions: Vec<AuthorityName>,\n 497|    ) -> (usize, usize, usize) {\n>498|        let low_scoring_authorities = self.low_scoring_authorities.load().load_full();\n 499|        if low_scoring_authorities.get(&self.authority).is_some() {\n 500|            return (positions.len(), 0, 0);\n 501|        }\n",
        "sourceLine": " 498|        let low_scoring_authorities = self.low_scoring_authorities.load().load_full();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.write_checkpoints [sui-core/src/checkpoints/mod.rs:635]",
          "mod::CheckpointBuilder::write_checkpoints",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:646]",
          "mod::CheckpointBuilder::write_checkpoints.anon [sui-core/src/checkpoints/mod.rs:646]",
          "sol.checkpoint_created [sui-core/src/checkpoints/mod.rs:653]",
          "checkpoint_output::SubmitCheckpointToConsensus::checkpoint_created",
          "sol.submit_to_consensus [sui-core/src/checkpoints/checkpoint_output.rs:96]",
          "consensus_adapter::Arc::submit_to_consensus",
          "sol.submit [sui-core/src/consensus_adapter.rs:1037]",
          "consensus_adapter::ConsensusAdapter::submit",
          "sol.submit_unchecked [sui-core/src/consensus_adapter.rs:554]",
          "consensus_adapter::ConsensusAdapter::submit_unchecked",
          "sol.submit_and_wait [sui-core/src/consensus_adapter.rs:578]",
          "consensus_adapter::ConsensusAdapter::submit_and_wait",
          "sol.submit_and_wait_inner [sui-core/src/consensus_adapter.rs:602]",
          "consensus_adapter::ConsensusAdapter::submit_and_wait_inner",
          "sol.await_submit_delay [sui-core/src/consensus_adapter.rs:627]",
          "consensus_adapter::ConsensusAdapter::await_submit_delay",
          "consensus_adapter::ConsensusAdapter::await_submit_delay.anon [sui-core/src/consensus_adapter.rs:407]",
          "sol.await_submit_delay_user_transaction [sui-core/src/consensus_adapter.rs:410]",
          "consensus_adapter::ConsensusAdapter::await_submit_delay_user_transaction",
          "sol.submission_position [sui-core/src/consensus_adapter.rs:428]",
          "consensus_adapter::ConsensusAdapter::submission_position",
          "sol.check_submission_wrt_connectivity_and_scores [sui-core/src/consensus_adapter.rs:471]",
          "consensus_adapter::ConsensusAdapter::check_submission_wrt_connectivity_and_scores"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/consensus_adapter.rs",
        "line": 364,
        "name": "low_scoring_authorities",
        "sourceLine": " 364|        self.low_scoring_authorities.swap(Arc::new(new_low_scoring));\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 173,
        "snippet": " 170|                    &transaction_digest,\n 171|                    &next_digest,\n 172|                )?;\n>173|                perpetual_batch.delete_range(\n 174|                    &perpetual_db.executed_effects,\n 175|                    &transaction_digest,\n 176|                    &next_digest,\n",
        "sourceLine": " 173|                perpetual_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:166]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:166]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:167]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:167]"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 383,
        "snippet": " 380|        Ok(self\n 381|            .perpetual_tables\n 382|            .executed_effects\n>383|            .contains_key(digest)?)\n 384|    }\n 385|\n 386|    /// Returns future containing the state hash for the given epoch\n",
        "sourceLine": " 383|            .contains_key(digest)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
          "lib::SuiNode::create_p2p_network",
          "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
          "sol.start [sui-node/src/lib.rs:722]",
          "consensus_handler::AsyncTransactionScheduler::start",
          "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
          "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
          "consensus_handler::AsyncTransactionScheduler::run",
          "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
          "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
          "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
          "transaction_manager::TransactionManager::enqueue",
          "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
          "transaction_manager::TransactionManager::enqueue_impl",
          "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]",
          "sol.is_tx_already_executed [sui-core/src/transaction_manager.rs:437]",
          "authority_store::AuthorityStore::is_tx_already_executed"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 173,
        "name": "executed_effects",
        "sourceLine": " 173|                perpetual_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 173,
        "snippet": " 170|                    &transaction_digest,\n 171|                    &next_digest,\n 172|                )?;\n>173|                perpetual_batch.delete_range(\n 174|                    &perpetual_db.executed_effects,\n 175|                    &transaction_digest,\n 176|                    &next_digest,\n",
        "sourceLine": " 173|                perpetual_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:166]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:166]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:167]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:167]"
        ]
      },
      "access2": {
        "col": 78,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 366,
        "snippet": " 363|        &self,\n 364|        digests: &[TransactionDigest],\n 365|    ) -> SuiResult<Vec<Option<TransactionEffects>>> {\n>366|        let executed_effects_digests = self.perpetual_tables.executed_effects.multi_get(digests)?;\n 367|        let effects = self.multi_get_effects(executed_effects_digests.iter().flatten())?;\n 368|        let mut tx_to_effects_map = effects\n 369|            .into_iter()\n",
        "sourceLine": " 366|        let executed_effects_digests = self.perpetual_tables.executed_effects.multi_get(digests)?;\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.notify_read_executed_effects [sui-core/src/checkpoints/mod.rs:625]",
          "authority_notify_read::Arc::notify_read_executed_effects",
          "sol.multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:54]",
          "authority_notify_read::Arc::multi_get_executed_effects",
          "authority_store::AuthorityStore::multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:117]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 173,
        "name": "executed_effects",
        "sourceLine": " 173|                perpetual_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 51,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 313,
        "snippet": " 310|        &self,\n 311|        checkpoint: &VerifiedCheckpoint,\n 312|    ) -> Result<(), TypedStoreError> {\n>313|        let mut batch = self.certified_checkpoints.batch();\n 314|        batch\n 315|            .insert_batch(\n 316|                &self.certified_checkpoints,\n",
        "sourceLine": " 313|        let mut batch = self.certified_checkpoints.batch();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1315]",
          "mod::CheckpointAggregator::run [sui-core/src/checkpoints/mod.rs:1315]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1067]",
          "mod::CheckpointAggregator::run.anon [sui-core/src/checkpoints/mod.rs:1067]",
          "sol.run_and_notify [sui-core/src/checkpoints/mod.rs:1068]",
          "mod::CheckpointAggregator::run_and_notify",
          "sol.run_inner [sui-core/src/checkpoints/mod.rs:1095]",
          "mod::CheckpointAggregator::run_inner",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1105]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1105]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:1134]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1134]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:1156]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1156]",
          "sol.insert_certified_checkpoint [sui-core/src/checkpoints/mod.rs:1164]",
          "mod::CheckpointStore::insert_certified_checkpoint"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 182,
        "snippet": " 179|        sequence_number: CheckpointSequenceNumber,\n 180|    ) -> Result<Option<VerifiedCheckpoint>, TypedStoreError> {\n 181|        self.certified_checkpoints\n>182|            .get(&sequence_number)\n 183|            .map(|maybe_checkpoint| maybe_checkpoint.map(|c| c.into()))\n 184|    }\n 185|\n",
        "sourceLine": " 182|            .get(&sequence_number)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:736]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:736]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:738]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:738]",
          "sol.get_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:740]",
          "mod::CheckpointStore::get_epoch_last_checkpoint",
          "mod::CheckpointStore::get_checkpoint_by_sequence_number [sui-core/src/checkpoints/mod.rs:446]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 313,
        "name": "certified_checkpoints",
        "sourceLine": " 313|        let mut batch = self.certified_checkpoints.batch();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 777,
        "snippet": " 774|                ) {\n 775|                    // todo - use NotifyRead::register_all might be faster\n 776|                    self.epoch_store\n>777|                        .consensus_message_processed_notify(\n 778|                            SequencedConsensusTransactionKey::External(\n 779|                                ConsensusTransactionKey::Certificate(*effects.transaction_digest()),\n 780|                            ),\n",
        "sourceLine": " 777|                        .consensus_message_processed_notify(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:757]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:764]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:764]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:771]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:771]"
        ]
      },
      "access2": {
        "col": 44,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 589,
        "snippet": " 586|                }\n 587|                Ok(false) => (),\n 588|            };\n>589|            let mut last = self.epoch_store.last_built_checkpoint_commit_height();\n 590|            for (height, pending) in self.epoch_store.get_pending_checkpoints(last) {\n 591|                last = Some(height);\n 592|                debug!(\n",
        "sourceLine": " 589|            let mut last = self.epoch_store.last_built_checkpoint_commit_height();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
          "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
          "lib::SuiNode::monitor_reconfiguration",
          "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1157]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1157]",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:1186]",
          "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1186]",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:1189]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 777,
        "name": "epoch_store",
        "sourceLine": " 777|                        .consensus_message_processed_notify(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 777,
        "snippet": " 774|                ) {\n 775|                    // todo - use NotifyRead::register_all might be faster\n 776|                    self.epoch_store\n>777|                        .consensus_message_processed_notify(\n 778|                            SequencedConsensusTransactionKey::External(\n 779|                                ConsensusTransactionKey::Certificate(*effects.transaction_digest()),\n 780|                            ),\n",
        "sourceLine": " 777|                        .consensus_message_processed_notify(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:757]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:764]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:764]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:771]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:771]"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_handler.rs",
        "line": 151,
        "snippet": " 148|\n 149|        let epoch_start = self\n 150|            .epoch_store\n>151|            .epoch_start_config()\n 152|            .epoch_start_timestamp_ms();\n 153|        let timestamp = if timestamp < epoch_start {\n 154|            error!(\n",
        "sourceLine": " 151|            .epoch_start_config()\n",
        "stacktrace": [
          "consensus_handler::ConsensusHandler::handle_consensus_output"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 777,
        "name": "epoch_store",
        "sourceLine": " 777|                        .consensus_message_processed_notify(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_handler.rs",
        "line": 318,
        "snippet": " 315|\n 316|        let transactions_to_schedule = self\n 317|            .epoch_store\n>318|            .process_consensus_transactions_and_commit_boundary(\n 319|                &sequenced_transactions,\n 320|                &end_of_publish_transactions,\n 321|                &self.checkpoint_service,\n",
        "sourceLine": " 318|            .process_consensus_transactions_and_commit_boundary(\n",
        "stacktrace": [
          "consensus_handler::ConsensusHandler::handle_consensus_output"
        ]
      },
      "access2": {
        "col": 25,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority.rs",
        "line": 2259,
        "snippet": " 2256|    /// the case. This also means we should minimize the number of call-sites. Only call it when\n 2257|    /// there is no way to obtain it from somewhere else.\n 2258|    pub fn load_epoch_store_one_call_per_task(&self) -> Guard<Arc<AuthorityPerEpochStore>> {\n>2259|        self.epoch_store.load()\n 2260|    }\n 2261|\n 2262|    // Load the epoch store, should be used in tests only.\n",
        "sourceLine": " 2259|        self.epoch_store.load()\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.handle_transaction_info_request_from_some_validators [sui-core/src/quorum_driver/mod.rs:457]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1828]",
          "authority_aggregator::AuthorityAggregator::handle_transaction_info_request_from_some_validators.anon [sui-core/src/authority_aggregator.rs:1829]",
          "sol.handle_transaction_info_request [sui-core/src/authority_aggregator.rs:1831]",
          "authority::AuthorityState::handle_transaction_info_request",
          "sol.load_epoch_store_one_call_per_task [sui-core/src/authority.rs:1804]",
          "authority::AuthorityState::load_epoch_store_one_call_per_task"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/consensus_handler.rs",
        "line": 318,
        "name": "epoch_store",
        "sourceLine": " 318|            .process_consensus_transactions_and_commit_boundary(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/consensus_handler.rs",
        "line": 318,
        "snippet": " 315|\n 316|        let transactions_to_schedule = self\n 317|            .epoch_store\n>318|            .process_consensus_transactions_and_commit_boundary(\n 319|                &sequenced_transactions,\n 320|                &end_of_publish_transactions,\n 321|                &self.checkpoint_service,\n",
        "sourceLine": " 318|            .process_consensus_transactions_and_commit_boundary(\n",
        "stacktrace": [
          "consensus_handler::ConsensusHandler::handle_consensus_output"
        ]
      },
      "access2": {
        "col": 44,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 589,
        "snippet": " 586|                }\n 587|                Ok(false) => (),\n 588|            };\n>589|            let mut last = self.epoch_store.last_built_checkpoint_commit_height();\n 590|            for (height, pending) in self.epoch_store.get_pending_checkpoints(last) {\n 591|                last = Some(height);\n 592|                debug!(\n",
        "sourceLine": " 589|            let mut last = self.epoch_store.last_built_checkpoint_commit_height();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/consensus_handler.rs",
        "line": 318,
        "name": "epoch_store",
        "sourceLine": " 318|            .process_consensus_transactions_and_commit_boundary(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 32,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 189,
        "snippet": " 186|        for effects in effects_to_prune {\n 187|            let effects_digest = effects.digest();\n 188|            if let Some(next_digest) = effects.digest().next_lexicographical() {\n>189|                perpetual_batch.delete_range(\n 190|                    &perpetual_db.effects,\n 191|                    &effects_digest,\n 192|                    &next_digest,\n",
        "sourceLine": " 189|                perpetual_batch.delete_range(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints",
          "sol.model.loop.for [sui-core/src/authority/authority_store_pruner.rs:186]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:186]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:188]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints.anon [sui-core/src/authority/authority_store_pruner.rs:188]"
        ]
      },
      "access2": {
        "col": 41,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store.rs",
        "line": 337,
        "snippet": " 334|        &self,\n 335|        effects_digests: impl Iterator<Item = &'a TransactionEffectsDigest>,\n 336|    ) -> SuiResult<Vec<Option<TransactionEffects>>> {\n>337|        Ok(self.perpetual_tables.effects.multi_get(effects_digests)?)\n 338|    }\n 339|\n 340|    pub fn get_executed_effects(\n",
        "sourceLine": " 337|        Ok(self.perpetual_tables.effects.multi_get(effects_digests)?)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
          "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
          "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
          "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
          "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
          "mod::QuorumDriverHandlerBuilder::start",
          "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
          "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
          "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
          "mod::QuorumDriverHandler::task_queue_processor",
          "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
          "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
          "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
          "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
          "mod::QuorumDriverHandler::process_task",
          "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
          "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
          "mod::QuorumDriver::process_transaction_result",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
          "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
          "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
          "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
          "mod::QuorumDriver::process_conflicting_tx",
          "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
          "mod::QuorumDriver::attempt_conflicting_transaction",
          "sol.execute_transaction_block [sui-core/src/quorum_driver/mod.rs:505]",
          "transaction_orchestrator::TransactiondOrchestrator::execute_transaction_block",
          "sol.submit [sui-core/src/transaction_orchestrator.rs:196]",
          "transaction_orchestrator::TransactiondOrchestrator::submit",
          "sol.notify_read_executed_effects [sui-core/src/transaction_orchestrator.rs:293]",
          "authority_notify_read::Arc::notify_read_executed_effects",
          "sol.multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:54]",
          "authority_notify_read::Arc::multi_get_executed_effects",
          "authority_store::AuthorityStore::multi_get_executed_effects [sui-core/src/authority/authority_notify_read.rs:117]",
          "sol.multi_get_effects [sui-core/src/authority/authority_store.rs:367]",
          "authority_store::AuthorityStore::multi_get_effects"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 189,
        "name": "effects",
        "sourceLine": " 189|                perpetual_batch.delete_range(\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 51,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 313,
        "snippet": " 310|        &self,\n 311|        checkpoint: &VerifiedCheckpoint,\n 312|    ) -> Result<(), TypedStoreError> {\n>313|        let mut batch = self.certified_checkpoints.batch();\n 314|        batch\n 315|            .insert_batch(\n 316|                &self.certified_checkpoints,\n",
        "sourceLine": " 313|        let mut batch = self.certified_checkpoints.batch();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1315]",
          "mod::CheckpointAggregator::run [sui-core/src/checkpoints/mod.rs:1315]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1067]",
          "mod::CheckpointAggregator::run.anon [sui-core/src/checkpoints/mod.rs:1067]",
          "sol.run_and_notify [sui-core/src/checkpoints/mod.rs:1068]",
          "mod::CheckpointAggregator::run_and_notify",
          "sol.run_inner [sui-core/src/checkpoints/mod.rs:1095]",
          "mod::CheckpointAggregator::run_inner",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1105]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1105]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:1134]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1134]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:1156]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1156]",
          "sol.insert_certified_checkpoint [sui-core/src/checkpoints/mod.rs:1164]",
          "mod::CheckpointStore::insert_certified_checkpoint"
        ]
      },
      "access2": {
        "col": 68,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 328,
        "snippet": " 325|        let mut effects_to_prune = vec![];\n 326|\n 327|        loop {\n>328|            let Some(ckpt) = checkpoint_store.certified_checkpoints.get(&(checkpoint_number + 1))? else {break;};\n 329|            let checkpoint = ckpt.into_inner();\n 330|            // Skipping because  checkpoint's epoch or checkpoint number is too new.\n 331|            // We have to respect the highest executed checkpoint watermark because there might be\n",
        "sourceLine": " 328|            let Some(ckpt) = checkpoint_store.certified_checkpoints.get(&(checkpoint_number + 1))? else {break;};\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 313,
        "name": "certified_checkpoints",
        "sourceLine": " 313|        let mut batch = self.certified_checkpoints.batch();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 72,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 206,
        "snippet": " 203|            }\n 204|        }\n 205|\n>206|        let mut checkpoints_batch = checkpoint_db.certified_checkpoints.batch();\n 207|\n 208|        for checkpoint_content in checkpoint_content_to_prune {\n 209|            let content_digest = *checkpoint_content.digest();\n",
        "sourceLine": " 206|        let mut checkpoints_batch = checkpoint_db.certified_checkpoints.batch();\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.Self::prune_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:262]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:327]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:327]",
          "sol.model.ifTrueElse [sui-core/src/authority/authority_store_pruner.rs:351]",
          "authority_store_pruner::AuthorityStorePruner::prune_for_eligible_epochs.anon [sui-core/src/authority/authority_store_pruner.rs:351]",
          "sol.Self::prune_checkpoints [sui-core/src/authority/authority_store_pruner.rs:366]",
          "authority_store_pruner::AuthorityStorePruner::prune_checkpoints"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 182,
        "snippet": " 179|        sequence_number: CheckpointSequenceNumber,\n 180|    ) -> Result<Option<VerifiedCheckpoint>, TypedStoreError> {\n 181|        self.certified_checkpoints\n>182|            .get(&sequence_number)\n 183|            .map(|maybe_checkpoint| maybe_checkpoint.map(|c| c.into()))\n 184|    }\n 185|\n",
        "sourceLine": " 182|            .get(&sequence_number)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
          "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
          "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
          "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
          "mod::CheckpointBuilder::make_checkpoint",
          "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
          "mod::CheckpointBuilder::create_checkpoints",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:736]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:736]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:738]",
          "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:738]",
          "sol.get_epoch_last_checkpoint [sui-core/src/checkpoints/mod.rs:740]",
          "mod::CheckpointStore::get_epoch_last_checkpoint",
          "mod::CheckpointStore::get_checkpoint_by_sequence_number [sui-core/src/checkpoints/mod.rs:446]"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/authority/authority_store_pruner.rs",
        "line": 206,
        "name": "certified_checkpoints",
        "sourceLine": " 206|        let mut checkpoints_batch = checkpoint_db.certified_checkpoints.batch();\n",
        "tyStr": ""
      }
    },
    {
      "access1": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 319,
        "snippet": " 316|                &self.certified_checkpoints,\n 317|                [(checkpoint.sequence_number(), checkpoint.serializable_ref())],\n 318|            )?\n>319|            .insert_batch(\n 320|                &self.checkpoint_by_digest,\n 321|                [(checkpoint.digest(), checkpoint.serializable_ref())],\n 322|            )?;\n",
        "sourceLine": " 319|            .insert_batch(\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
          "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
          "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
          "lib::SuiNode::construct_validator_components",
          "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
          "lib::SuiNode::start_epoch_specific_validator_components",
          "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
          "lib::SuiNode::start_checkpoint_service",
          "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
          "mod::CheckpointService::spawn",
          "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1315]",
          "mod::CheckpointAggregator::run [sui-core/src/checkpoints/mod.rs:1315]",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1067]",
          "mod::CheckpointAggregator::run.anon [sui-core/src/checkpoints/mod.rs:1067]",
          "sol.run_and_notify [sui-core/src/checkpoints/mod.rs:1068]",
          "mod::CheckpointAggregator::run_and_notify",
          "sol.run_inner [sui-core/src/checkpoints/mod.rs:1095]",
          "mod::CheckpointAggregator::run_inner",
          "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:1105]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1105]",
          "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:1134]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1134]",
          "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:1156]",
          "mod::CheckpointAggregator::run_inner.anon [sui-core/src/checkpoints/mod.rs:1156]",
          "sol.insert_certified_checkpoint [sui-core/src/checkpoints/mod.rs:1164]",
          "mod::CheckpointStore::insert_certified_checkpoint"
        ]
      },
      "access2": {
        "col": 13,
        "dir": "/git/sui/crates",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 173,
        "snippet": " 170|        digest: &CheckpointDigest,\n 171|    ) -> Result<Option<VerifiedCheckpoint>, TypedStoreError> {\n 172|        self.checkpoint_by_digest\n>173|            .get(digest)\n 174|            .map(|maybe_checkpoint| maybe_checkpoint.map(|c| c.into()))\n 175|    }\n 176|\n",
        "sourceLine": " 173|            .get(digest)\n",
        "stacktrace": [
          "main::main",
          "sol.spawn [sui-node/src/main.rs:106]",
          "main::main.anon [sui-node/src/main.rs:106]",
          "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
          "lib::SuiNode::start_async",
          "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
          "authority::AuthorityState::new",
          "authority_store_pruner::AuthorityStorePruner::new [sui-core/src/authority.rs:1985]",
          "sol.Self::setup_pruning [sui-core/src/authority/authority_store_pruner.rs:524]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning",
          "sol.tokio::task::spawn [sui-core/src/authority/authority_store_pruner.rs:494]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:494]",
          "sol.model.loop.infinite [sui-core/src/authority/authority_store_pruner.rs:495]",
          "authority_store_pruner::AuthorityStorePruner::setup_pruning.anon [sui-core/src/authority/authority_store_pruner.rs:495]",
          "sol.model.macro.tokio::select.!7 [sui-core/src/authority/authority_store_pruner.rs:496]",
          "authority_store_pruner::AuthorityStorePruner::prune_objects_for_eligible_epochs [sui-core/src/authority/authority_store_pruner.rs:496]",
          "sol.get_highest_executed_checkpoint [sui-core/src/authority/authority_store_pruner.rs:258]",
          "mod::CheckpointStore::get_highest_executed_checkpoint",
          "sol.get_checkpoint_by_digest [sui-core/src/checkpoints/mod.rs:277]",
          "mod::CheckpointStore::get_checkpoint_by_digest"
        ]
      },
      "priority": 3,
      "sharedObj": {
        "dir": "/git/sui/crates",
        "field": "",
        "filename": "sui-core/src/checkpoints/mod.rs",
        "line": 319,
        "name": "checkpoint_by_digest",
        "sourceLine": " 319|            .insert_batch(\n",
        "tyStr": ""
      }
    }
  ],
  "toctou": [],
  "version": 1
}
