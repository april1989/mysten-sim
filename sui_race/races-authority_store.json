{
    "races": [
        {
            "schedule": "1-2",
            "access1": {
                "col": 17,
                "dir": "/git/sui/crates",
                "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
                "line": 517,
                "snippet": " 514|\n 515|        if change_epoch_tx.contains_shared_object() {\n 516|            epoch_store\n>517|                .acquire_shared_locks_from_effects(\n 518|                    &change_epoch_tx,\n 519|                    &change_epoch_fx,\n 520|                    &self.authority_store,\n",
                "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
                "stacktrace": [
                    "main::main",
                    "sol.spawn [sui-node/src/main.rs:106]",
                    "main::main.anon [sui-node/src/main.rs:106]",
                    "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                    "lib::SuiNode::start_async",
                    "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
                    "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
                    "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
                    "lib::SuiNode::monitor_reconfiguration",
                    "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
                    "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
                    "sol.run_epoch [sui-node/src/lib.rs:1094]",
                    "mod::CheckpointExecutor::run_epoch",
                    "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
                    "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
                    "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
                    "mod::CheckpointExecutor::check_epoch_last_checkpoint",
                    "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
                    "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
                    "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
                    "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
                    "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
                    "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
                    "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
                    "mod::CheckpointExecutor::execute_change_epoch_tx",
                    "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]",
                    "mod::CheckpointExecutor::execute_change_epoch_tx.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]"
                ]
            },
            "access2": {
                "col": 21,
                "dir": "/git/sui/crates",
                "filename": "sui-core/src/transaction_manager.rs",
                "line": 437,
                "snippet": " 434|                // skip already executed txes\n 435|                if self\n 436|                    .authority_store\n>437|                    .is_tx_already_executed(&digest)\n 438|                    .expect(\"Failed to check if tx is already executed\")\n 439|                {\n 440|                    // also ensure the transaction will not be retried after restart.\n",
                "sourceLine": " 437|                    .is_tx_already_executed(&digest)\n",
                "stacktrace": [
                    "main::main",
                    "sol.spawn [sui-node/src/main.rs:106]",
                    "main::main.anon [sui-node/src/main.rs:106]",
                    "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                    "lib::SuiNode::start_async",
                    "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
                    "lib::SuiNode::create_p2p_network",
                    "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
                    "sol.start [sui-node/src/lib.rs:722]",
                    "consensus_handler::AsyncTransactionScheduler::start",
                    "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
                    "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
                    "consensus_handler::AsyncTransactionScheduler::run",
                    "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
                    "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
                    "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
                    "transaction_manager::TransactionManager::enqueue",
                    "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
                    "transaction_manager::TransactionManager::enqueue_impl",
                    "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]"
                ]
            },
            "priority": 4,
            "sharedObj": {
                "dir": "/git/sui/crates",
                "field": "",
                "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
                "line": 517,
                "name": "authority_store",
                "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
                "tyStr": ""
            }
        },
        {
            "schedule": "3-4",
            "access1": {
              "col": 17,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
              "line": 517,
              "snippet": " 514|\n 515|        if change_epoch_tx.contains_shared_object() {\n 516|            epoch_store\n>517|                .acquire_shared_locks_from_effects(\n 518|                    &change_epoch_tx,\n 519|                    &change_epoch_fx,\n 520|                    &self.authority_store,\n",
              "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.spawn_monitored_task [sui-node/src/lib.rs:583]",
                "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:583]",
                "sol.Self::monitor_reconfiguration [sui-node/src/lib.rs:583]",
                "lib::SuiNode::monitor_reconfiguration",
                "sol.model.loop.infinite [sui-node/src/lib.rs:1064]",
                "lib::SuiNode::monitor_reconfiguration.anon [sui-node/src/lib.rs:1064]",
                "sol.run_epoch [sui-node/src/lib.rs:1094]",
                "mod::CheckpointExecutor::run_epoch",
                "sol.model.loop.infinite [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
                "mod::CheckpointExecutor::run_epoch.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:153]",
                "sol.check_epoch_last_checkpoint [sui-core/src/checkpoints/checkpoint_executor/mod.rs:156]",
                "mod::CheckpointExecutor::check_epoch_last_checkpoint",
                "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
                "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:556]",
                "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
                "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:557]",
                "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
                "mod::CheckpointExecutor::check_epoch_last_checkpoint.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:558]",
                "sol.execute_change_epoch_tx [sui-core/src/checkpoints/checkpoint_executor/mod.rs:574]",
                "mod::CheckpointExecutor::execute_change_epoch_tx",
                "sol.model.ifTrueElse [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]",
                "mod::CheckpointExecutor::execute_change_epoch_tx.anon [sui-core/src/checkpoints/checkpoint_executor/mod.rs:515]"
              ]
            },
            "access2": {
              "col": 29,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/storage.rs",
              "line": 149,
              "snippet": " 146|        &self,\n 147|        digest: &TransactionEventsDigest,\n 148|    ) -> Result<Option<TransactionEvents>, Self::Error> {\n>149|        self.authority_store.get_events(digest)\n 150|    }\n 151|}\n 152|\n",
              "sourceLine": " 149|        self.authority_store.get_events(digest)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
                "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
                "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
                "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
                "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
                "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
                "mod::QuorumDriverHandlerBuilder::start",
                "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
                "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
                "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
                "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
                "mod::QuorumDriverHandler::task_queue_processor",
                "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
                "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
                "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
                "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
                "mod::QuorumDriverHandler::process_task",
                "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
                "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
                "mod::QuorumDriver::process_transaction_result",
                "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
                "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
                "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
                "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
                "mod::QuorumDriver::process_conflicting_tx",
                "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
                "mod::QuorumDriver::attempt_conflicting_transaction",
                "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
                "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
                "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
                "authority_aggregator::AuthorityAggregator::process_certificate",
                "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
                "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
                "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
                "authority_server::ValidatorService::handle_certificate_v2",
                "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
                "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
                "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
                "authority_server::ValidatorService::handle_certificate",
                "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
                "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
                "sol.model.ifTrueElse [sui-core/src/authority_server.rs:398]",
                "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:398]",
                "sol.get_transaction_events [sui-core/src/authority_server.rs:399]",
                "storage::RocksDbStore::get_transaction_events"
              ]
            },
            "priority": 4,
            "sharedObj": {
              "dir": "/git/sui/crates",
              "field": "",
              "filename": "sui-core/src/checkpoints/checkpoint_executor/mod.rs",
              "line": 517,
              "name": "authority_store",
              "sourceLine": " 517|                .acquire_shared_locks_from_effects(\n",
              "tyStr": ""
            }
          },
          {
            "schedule": "2-2",
            "access1": {
              "col": 13,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/transaction_manager.rs",
              "line": 500,
              "snippet": " 497|        // So missing objects' availability are checked again after releasing the TM lock.\n 498|        let cache_miss_availibility = self\n 499|            .authority_store\n>500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n 501|            .expect(\"Checking object existence cannot fail!\")\n 502|            .into_iter()\n 503|            .zip(input_object_cache_misses.into_iter());\n",
              "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.AuthorityState::new [sui-node/src/lib.rs:436]",
                "authority::AuthorityState::new",
                "transaction_manager::TransactionManager::new [sui-core/src/authority.rs:1975]",
                "sol.enqueue [sui-core/src/transaction_manager.rs:378]",
                "transaction_manager::TransactionManager::enqueue",
                "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
                "transaction_manager::TransactionManager::enqueue_impl"
              ]
            },
            "access2": {
              "col": 21,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/transaction_manager.rs",
              "line": 437,
              "snippet": " 434|                // skip already executed txes\n 435|                if self\n 436|                    .authority_store\n>437|                    .is_tx_already_executed(&digest)\n 438|                    .expect(\"Failed to check if tx is already executed\")\n 439|                {\n 440|                    // also ensure the transaction will not be retried after restart.\n",
              "sourceLine": " 437|                    .is_tx_already_executed(&digest)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
                "lib::SuiNode::create_p2p_network",
                "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
                "sol.start [sui-node/src/lib.rs:722]",
                "consensus_handler::AsyncTransactionScheduler::start",
                "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
                "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
                "consensus_handler::AsyncTransactionScheduler::run",
                "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
                "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
                "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
                "transaction_manager::TransactionManager::enqueue",
                "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
                "transaction_manager::TransactionManager::enqueue_impl",
                "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]"
              ]
            },
            "priority": 3,
            "sharedObj": {
              "dir": "/git/sui/crates",
              "field": "",
              "filename": "sui-core/src/transaction_manager.rs",
              "line": 500,
              "name": "authority_store",
              "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
              "tyStr": ""
            }
          },
          {
            "schedule": "2-4",
            "access1": {
              "col": 13,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/transaction_manager.rs",
              "line": 500,
              "snippet": " 497|        // So missing objects' availability are checked again after releasing the TM lock.\n 498|        let cache_miss_availibility = self\n 499|            .authority_store\n>500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n 501|            .expect(\"Checking object existence cannot fail!\")\n 502|            .into_iter()\n 503|            .zip(input_object_cache_misses.into_iter());\n",
              "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
                "lib::SuiNode::create_p2p_network",
                "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
                "sol.start [sui-node/src/lib.rs:722]",
                "consensus_handler::AsyncTransactionScheduler::start",
                "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
                "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
                "consensus_handler::AsyncTransactionScheduler::run",
                "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
                "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
                "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
                "transaction_manager::TransactionManager::enqueue",
                "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
                "transaction_manager::TransactionManager::enqueue_impl"
              ]
            },
            "access2": {
              "col": 29,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/storage.rs",
              "line": 149,
              "snippet": " 146|        &self,\n 147|        digest: &TransactionEventsDigest,\n 148|    ) -> Result<Option<TransactionEvents>, Self::Error> {\n>149|        self.authority_store.get_events(digest)\n 150|    }\n 151|}\n 152|\n",
              "sourceLine": " 149|        self.authority_store.get_events(digest)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
                "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
                "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
                "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
                "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
                "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
                "mod::QuorumDriverHandlerBuilder::start",
                "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
                "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
                "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
                "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
                "mod::QuorumDriverHandler::task_queue_processor",
                "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
                "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
                "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
                "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
                "mod::QuorumDriverHandler::process_task",
                "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
                "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
                "mod::QuorumDriver::process_transaction_result",
                "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
                "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
                "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
                "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
                "mod::QuorumDriver::process_conflicting_tx",
                "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
                "mod::QuorumDriver::attempt_conflicting_transaction",
                "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
                "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
                "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
                "authority_aggregator::AuthorityAggregator::process_certificate",
                "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
                "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
                "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
                "authority_server::ValidatorService::handle_certificate_v2",
                "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
                "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
                "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
                "authority_server::ValidatorService::handle_certificate",
                "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
                "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
                "sol.model.ifTrueElse [sui-core/src/authority_server.rs:398]",
                "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:398]",
                "sol.get_transaction_events [sui-core/src/authority_server.rs:399]",
                "storage::RocksDbStore::get_transaction_events"
              ]
            },
            "priority": 3,
            "sharedObj": {
              "dir": "/git/sui/crates",
              "field": "",
              "filename": "sui-core/src/transaction_manager.rs",
              "line": 500,
              "name": "authority_store",
              "sourceLine": " 500|            .multi_input_objects_exist(input_object_cache_misses.iter().cloned())\n",
              "tyStr": ""
            }
          },
          {
            "schedule": "5-2",
            "access1": {
              "col": 8,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/state_accumulator.rs",
              "line": 278,
              "snippet": " 275|        effects: Vec<TransactionEffects>,\n 276|        protocol_config: &ProtocolConfig,\n 277|    ) -> Accumulator {\n>278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n 279|    }\n 280|\n 281|    /// Unions all checkpoint accumulators at the end of the epoch to generate the\n",
              "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
                "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
                "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
                "lib::SuiNode::construct_validator_components",
                "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
                "lib::SuiNode::start_epoch_specific_validator_components",
                "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
                "lib::SuiNode::start_checkpoint_service",
                "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
                "mod::CheckpointService::spawn",
                "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
                "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
                "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
                "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
                "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
                "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
                "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
                "mod::CheckpointBuilder::make_checkpoint",
                "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
                "mod::CheckpointBuilder::create_checkpoints",
                "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
                "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
                "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
                "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
                "sol.accumulate_checkpoint [sui-core/src/checkpoints/mod.rs:850]",
                "state_accumulator::StateAccumulator::accumulate_checkpoint",
                "state_accumulator::StateAccumulator::accumulate_effects [sui-core/src/state_accumulator.rs:260]"
              ]
            },
            "access2": {
              "col": 21,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/transaction_manager.rs",
              "line": 437,
              "snippet": " 434|                // skip already executed txes\n 435|                if self\n 436|                    .authority_store\n>437|                    .is_tx_already_executed(&digest)\n 438|                    .expect(\"Failed to check if tx is already executed\")\n 439|                {\n 440|                    // also ensure the transaction will not be retried after restart.\n",
              "sourceLine": " 437|                    .is_tx_already_executed(&digest)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.Self::create_p2p_network [sui-node/src/lib.rs:369]",
                "lib::SuiNode::create_p2p_network",
                "lib::SuiNode::create_p2p_network.anon [sui-node/src/lib.rs:662]",
                "sol.start [sui-node/src/lib.rs:722]",
                "consensus_handler::AsyncTransactionScheduler::start",
                "sol.spawn_monitored_task [sui-core/src/consensus_handler.rs:401]",
                "sol.Self::run [sui-core/src/consensus_handler.rs:401]",
                "consensus_handler::AsyncTransactionScheduler::run",
                "sol.model.loop.while [sui-core/src/consensus_handler.rs:414]",
                "consensus_handler::AsyncTransactionScheduler::run.anon [sui-core/src/consensus_handler.rs:414]",
                "sol.enqueue [sui-core/src/consensus_handler.rs:417]",
                "transaction_manager::TransactionManager::enqueue",
                "sol.enqueue_impl [sui-core/src/transaction_manager.rs:406]",
                "transaction_manager::TransactionManager::enqueue_impl",
                "transaction_manager::TransactionManager::enqueue_impl.anon [sui-core/src/transaction_manager.rs:432]"
              ]
            },
            "priority": 3,
            "sharedObj": {
              "dir": "/git/sui/crates",
              "field": "",
              "filename": "sui-core/src/state_accumulator.rs",
              "line": 278,
              "name": "authority_store",
              "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
              "tyStr": ""
            }
          },
          {
            "schedule": "4-5",
            "access1": {
              "col": 8,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/state_accumulator.rs",
              "line": 278,
              "snippet": " 275|        effects: Vec<TransactionEffects>,\n 276|        protocol_config: &ProtocolConfig,\n 277|    ) -> Accumulator {\n>278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n 279|    }\n 280|\n 281|    /// Unions all checkpoint accumulators at the end of the epoch to generate the\n",
              "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.model.ifTrueElse [sui-node/src/lib.rs:530]",
                "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:530]",
                "sol.Self::construct_validator_components [sui-node/src/lib.rs:531]",
                "lib::SuiNode::construct_validator_components",
                "sol.Self::start_epoch_specific_validator_components [sui-node/src/lib.rs:783]",
                "lib::SuiNode::start_epoch_specific_validator_components",
                "sol.Self::start_checkpoint_service [sui-node/src/lib.rs:816]",
                "lib::SuiNode::start_checkpoint_service",
                "sol.CheckpointService::spawn [sui-node/src/lib.rs:914]",
                "mod::CheckpointService::spawn",
                "sol.spawn_monitored_task [sui-core/src/checkpoints/mod.rs:1304]",
                "mod::CheckpointBuilder::run [sui-core/src/checkpoints/mod.rs:1304]",
                "sol.model.loop.infinite [sui-core/src/checkpoints/mod.rs:580]",
                "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:580]",
                "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:590]",
                "mod::CheckpointBuilder::run.anon [sui-core/src/checkpoints/mod.rs:590]",
                "sol.make_checkpoint [sui-core/src/checkpoints/mod.rs:596]",
                "mod::CheckpointBuilder::make_checkpoint",
                "sol.create_checkpoints [sui-core/src/checkpoints/mod.rs:634]",
                "mod::CheckpointBuilder::create_checkpoints",
                "sol.model.loop.for [sui-core/src/checkpoints/mod.rs:807]",
                "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:807]",
                "sol.model.ifTrueElse [sui-core/src/checkpoints/mod.rs:835]",
                "mod::CheckpointBuilder::create_checkpoints.anon [sui-core/src/checkpoints/mod.rs:835]",
                "sol.accumulate_checkpoint [sui-core/src/checkpoints/mod.rs:850]",
                "state_accumulator::StateAccumulator::accumulate_checkpoint",
                "state_accumulator::StateAccumulator::accumulate_effects [sui-core/src/state_accumulator.rs:260]"
              ]
            },
            "access2": {
              "col": 29,
              "dir": "/git/sui/crates",
              "filename": "sui-core/src/storage.rs",
              "line": 149,
              "snippet": " 146|        &self,\n 147|        digest: &TransactionEventsDigest,\n 148|    ) -> Result<Option<TransactionEvents>, Self::Error> {\n>149|        self.authority_store.get_events(digest)\n 150|    }\n 151|}\n 152|\n",
              "sourceLine": " 149|        self.authority_store.get_events(digest)\n",
              "stacktrace": [
                "main::main",
                "sol.spawn [sui-node/src/main.rs:106]",
                "main::main.anon [sui-node/src/main.rs:106]",
                "sol.sui_node::SuiNode::start_async [sui-node/src/main.rs:107]",
                "lib::SuiNode::start_async",
                "sol.model.ifTrueElse [sui-node/src/lib.rs:477]",
                "lib::SuiNode::start_async.anon [sui-node/src/lib.rs:477]",
                "sol.TransactiondOrchestrator::new_with_network_clients [sui-node/src/lib.rs:479]",
                "transaction_orchestrator::TransactiondOrchestrator::new_with_network_clients",
                "transaction_orchestrator::TransactiondOrchestrator::new [sui-core/src/transaction_orchestrator.rs:87]",
                "sol.start [sui-core/src/transaction_orchestrator.rs:118]",
                "mod::QuorumDriverHandlerBuilder::start",
                "mod::QuorumDriverHandler::new [sui-core/src/quorum_driver/mod.rs:829]",
                "mod::QuorumDriverHandler::new.anon [sui-core/src/quorum_driver/mod.rs:558]",
                "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:560]",
                "sol.Self::task_queue_processor [sui-core/src/quorum_driver/mod.rs:560]",
                "mod::QuorumDriverHandler::task_queue_processor",
                "sol.model.loop.while [sui-core/src/quorum_driver/mod.rs:765]",
                "mod::QuorumDriverHandler::task_queue_processor.anon [sui-core/src/quorum_driver/mod.rs:765]",
                "sol.spawn_monitored_task [sui-core/src/quorum_driver/mod.rs:779]",
                "sol.QuorumDriverHandler::process_task [sui-core/src/quorum_driver/mod.rs:779]",
                "mod::QuorumDriverHandler::process_task",
                "mod::QuorumDriver::process_transaction [sui-core/src/quorum_driver/mod.rs:681]",
                "sol.process_transaction_result [sui-core/src/quorum_driver/mod.rs:256]",
                "mod::QuorumDriver::process_transaction_result",
                "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:264]",
                "sol.model.ifTrueElse [sui-core/src/quorum_driver/mod.rs:281]",
                "mod::QuorumDriver::process_transaction_result.anon [sui-core/src/quorum_driver/mod.rs:281]",
                "sol.process_conflicting_tx [sui-core/src/quorum_driver/mod.rs:282]",
                "mod::QuorumDriver::process_conflicting_tx",
                "sol.attempt_conflicting_transaction [sui-core/src/quorum_driver/mod.rs:352]",
                "mod::QuorumDriver::attempt_conflicting_transaction",
                "mod::QuorumDriver::attempt_conflicting_transaction.anon [sui-core/src/quorum_driver/mod.rs:466]",
                "mod::QuorumDriver::process_certificate [sui-core/src/quorum_driver/mod.rs:476]",
                "sol.process_certificate [sui-core/src/quorum_driver/mod.rs:405]",
                "authority_aggregator::AuthorityAggregator::process_certificate",
                "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1581]",
                "authority_aggregator::AuthorityAggregator::process_certificate.anon [sui-core/src/authority_aggregator.rs:1582]",
                "sol.handle_certificate_v2 [sui-core/src/authority_aggregator.rs:1585]",
                "authority_server::ValidatorService::handle_certificate_v2",
                "sol.spawn_monitored_task [sui-core/src/authority_server.rs:557]",
                "authority_server::ValidatorService::handle_certificate_v2.anon [sui-core/src/authority_server.rs:557]",
                "sol.Self::handle_certificate [sui-core/src/authority_server.rs:559]",
                "authority_server::ValidatorService::handle_certificate",
                "sol.model.ifTrueElse [sui-core/src/authority_server.rs:395]",
                "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:395]",
                "sol.model.ifTrueElse [sui-core/src/authority_server.rs:398]",
                "authority_server::ValidatorService::handle_certificate.anon [sui-core/src/authority_server.rs:398]",
                "sol.get_transaction_events [sui-core/src/authority_server.rs:399]",
                "storage::RocksDbStore::get_transaction_events"
              ]
            },
            "priority": 3,
            "sharedObj": {
              "dir": "/git/sui/crates",
              "field": "",
              "filename": "sui-core/src/state_accumulator.rs",
              "line": 278,
              "name": "authority_store",
              "sourceLine": " 278|        accumulate_effects(&*self.authority_store, effects, protocol_config)\n",
              "tyStr": ""
            }
          },
    ]
}